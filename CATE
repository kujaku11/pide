#!/usr/bin/env python3

import os

core_path_ext = os.path.join(os.path.dirname(os.path.abspath(__file__)) , 'cate_src')

import sys, csv, platform, warnings
import numpy as np
import iapws
import matplotlib.pyplot as plt
from matplotlib.pyplot import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from PyQt5 import QtGui, QtCore
from PyQt5.QtWidgets import *

try:
	import pyperclip
	clipbool = True
except ModuleNotFoundError:
	pass
	clipbool = False

#Importing external functions

sys.path.append(core_path_ext)

#importing odd melt/fluid functions
from cond_models.melt_odd import * 
from cond_models.fluids_odd import * 
#importing odd rock functions
from cond_models.rocks.granite_odd import * 
# from cond_models.rocks.granulite_odd import *
# from cond_models.rocks.sandstone_odd import *
# from cond_models.rocks.gneiss_odd import *
# from cond_models.rocks.amphibolite_odd import *
# from cond_models.rocks.basalt_odd import *
# from cond_models.rocks.mud_odd import *
# from cond_models.rocks.gabbro_odd import *
# from cond_models.rocks.other_odd import *
#importing odd mineral functions
# from cond_models.minerals.quartz_odd import *
# from cond_models.minerals.plag_odd import *
# from cond_models.minerals.amp_odd import *
# from cond_models.minerals.kfelds_odd import *
# from cond_models.minerals.pyx_odd import *
# from cond_models.minerals.mica_odd import *
# from cond_models.minerals.clay_odd import *
# from cond_models.minerals.carbonates_odd import *
# from cond_models.minerals.garnet_odd import *
# from cond_models.minerals.sulphides_odd import *
# from cond_models.minerals.graphite_odd import *
# from cond_models.minerals.other_odd import *

warnings.filterwarnings("ignore", category=RuntimeWarning) #ignoring many RuntimeWarning printouts that are utterly useless

#Color coding class for fancy-colored print-outs.
class bcolors:
	BLUE = '\033[94m'
	GREEN = '\033[92m'
	RED = '\033[91m'
	B = '\033[0m'
	NC ='\x1b[0m'
	
#Version 0.1, June. 2023.
#CATE - (C)antle (A)nalysis (T)ools for (E)lectromagnetics
#Program written by Sinan Ozaydin (Macquarie University, School of Natural Sciences
#sciences, Australia).

#Indentation method: hard tabs ('\t')

#Works with Python3
#Required libraries: numpy,matplotlib,PyQt5
#optional libraries: pyperclip

print(bcolors.GREEN + '#############################################')
print(' ')
print(' ')
print(' ')
print(bcolors.GREEN + '                  CATE 0.1')
print(' ')
print(bcolors.BLUE + '            Crust Analysis Tools')
print('                     for')
print('               Electromagnetics')
print(' ')
print(' ')
print(' ')
print(bcolors.GREEN + '#############################################')
print(bcolors.BLUE + 'developed by Sinan Ozaydin,' + bcolors.RED +  ' School of Geosciences, University of Sydney')
print(' ')
print(' ')
print(bcolors.NC + 'for questions, email: sinan.ozaydin@protonmail.com or sinan.ozaydin@sydney.edu.au')
print('Initializing the software...')

class CATE(QMainWindow):

	def __init__(self, core_path = core_path_ext, clipping = clipbool, parent = None):

		super(CATE,self).__init__(parent)

		self.core_path = core_path
		self.working_path = os.getcwd()

		self.clipping = clipping

		if platform.system() == 'Windows':
			self.commandmv = 'move'
		else:
			self.commandmv = 'mv'

		args_input = sys.argv
		if len(args_input) == 1:
			CATE.arguments_load = False
			CATE.composition_args_path = False
		else:
			CATE.arguments_load = True
			try:
				CATE.composition_args_path = args_input[1]
			except IndexError:
				pass
		
		self.setMinimumSize(1800,1000)
		self.setStyleSheet("QMainWindow{background-color: #ebfaeb;border: 1px solid black}")
		self.setWindowTitle("CATE")
		
		#Defining Menubar items
		mainMenu = self.menuBar()
		mainMenu.setNativeMenuBar(False)
		mainMenu.setStyleSheet("QMenuBar{background-color: #ccffcc;border: 1px solid black}")
		fileMenu = mainMenu.addMenu('Main')
		mainMenu.setStyleSheet("QMenuBar{background-color: #ccffcc;border: 1px solid black}")
		
		#ENV FILE BUTTON
		infoMain = QAction("&Info", self)
		infoMain.setShortcut("Ctrl+O")
		infoMain.triggered.connect(self.info_main)
		fileMenu.addAction(infoMain)

		self.home()
		
	def home(self):
		
		#Setting up initial variables.

		CATE.loaded_file = False
		self.cond_calculated = False

		CATE.plot_style_list = ['ggplot', 'default', 'classic','bmh', 'fast', 'seaborn', 'seaborn-colorblind',
		'seaborn-deep','seaborn-pastel', 'seaborn-dark','fivethirtyeight','grayscale']
		CATE.plot_style_selection = 0

		self.init_params = self.read_csv(filename = os.path.join(self.core_path,'init_param.csv'),delim = ',') #loading the blueprint parameter file.

		if CATE.arguments_load == False:

			CATE.fluid_cond_selection = 0
			CATE.melt_cond_selection = 0

			CATE.fluid_or_melt_method = 0
			CATE.solid_phase_method = 1

			CATE.granite_cond_selection = 0
			CATE.granulite_cond_selection = 0
			CATE.sandstone_cond_selection = 0
			CATE.gneiss_cond_selection = 0
			CATE.amphibolite_cond_selection = 0
			CATE.basalt_cond_selection = 0
			CATE.mud_cond_selection = 0
			CATE.gabbro_cond_selection = 0
			CATE.other_rock_cond_selection = 0

			CATE.quartz_cond_selection = 0
			CATE.plag_cond_selection = 0
			CATE.amp_cond_selection = 0
			CATE.kfelds_cond_selection = 0
			CATE.pyx_cond_selection = 0
			CATE.mica_cond_selection = 0
			CATE.clay_cond_selection = 0
			CATE.carbonate_cond_selection = 0
			CATE.garnet_cond_selection = 0
			CATE.sulphide_cond_selection = 0
			CATE.graphite_cond_selection = 0
			CATE.other_cond_selection = 0

			self.salinity_fluid = np.zeros(1)
			self.k2o_melt = np.zeros(1)
			self.co2_melt = np.zeros(1)
			self.h2o_melt = np.zeros(1)
			self.na2o_melt = np.zeros(1)
			
			self.granite_frac = np.zeros(1) * 0.8
			self.granulite_frac = np.zeros(1) * 0.2
			self.sandstone_frac = np.zeros(1)
			self.gneiss_frac = np.zeros(1)
			self.amphibolite_frac = np.zeros(1)
			self.basalt_frac = np.zeros(1)
			self.mud_frac = np.zeros(1)
			self.gabbro_frac = np.zeros(1)
			self.other_rock_frac = np.zeros(1)

			CATE.granite_water = np.zeros(1)
			CATE.granulite_water = np.zeros(1)
			CATE.sandstone_water = np.zeros(1)
			CATE.gneiss_water = np.zeros(1)
			CATE.amphibolite_water = np.zeros(1)
			CATE.basalt_water = np.zeros(1)
			CATE.mud_water = np.zeros(1)
			CATE.gabbro_water = np.zeros(1)
			CATE.other_rock_water = np.zeros(1)
			
			self.quartz_frac = np.zeros(1)
			self.plag_frac = np.zeros(1)
			self.amp_frac = np.zeros(1)
			self.kfelds_frac = np.zeros(1)
			self.pyx_frac = np.zeros(1)
			self.mica_frac = np.zeros(1)
			self.clay_frac = np.zeros(1)
			self.carbonate_frac = np.zeros(1)
			self.garnet_frac = np.zeros(1)
			self.sulphide_frac = np.zeros(1)
			self.graphite_frac = np.zeros(1)
			self.other_frac = np.zeros(1)

			CATE.quartz_water = np.zeros(1)
			CATE.plag_water = np.zeros(1)
			CATE.amp_water = np.zeros(1)
			CATE.kfelds_water = np.zeros(1)
			CATE.garnet_water = np.zeros(1)
			CATE.carbonate_water = np.zeros(1)
			CATE.pyx_water = np.zeros(1)
			CATE.mica_water = np.zeros(1)
			CATE.clay_water = np.zeros(1)
			CATE.other_water = np.zeros(1)
			
			self.melt_fluid_mass_frac = np.zeros(1)

			self.bckgr_res = np.zeros(1)
			
			CATE.phs_mix_method = 0
			CATE.phs_melt_mix_method = 0
			
			CATE.melt_fluid_m = np.ones(1) * 5
			
			CATE.granite_m = np.ones(1) * 4
			CATE.granulite_m = np.ones(1) * 4
			CATE.sandstone_m = np.ones(1) * 4
			CATE.gneiss_m = np.ones(1) * 4
			CATE.amphibolite_m = np.ones(1) * 4
			CATE.basalt_m = np.ones(1) * 4
			CATE.mud_m = np.ones(1) * 4
			CATE.gabbro_m = np.ones(1) * 4
			CATE.other_rock_m = np.ones(1) * 4
			
			CATE.quartz_m = np.ones(1) * 1
			CATE.plag_m = np.ones(1) * 2.5
			CATE.amp_m = np.ones(1) * 4
			CATE.kfelds_m = np.ones(1) * 2.5
			CATE.pyx_m = np.ones(1) * 4
			CATE.mica_m = np.ones(1) * 4
			CATE.clay_m = np.ones(1) * 4
			CATE.carbonate_m = np.ones(1) * 4
			CATE.garnet_m = np.ones(1) * 4
			CATE.sulphide_m = np.ones(1) * 6
			CATE.graphite_m = np.ones(1) * 6
			CATE.other_m = np.ones(1) * 6
			
			self.depth = np.array([26.0])
			self.p = np.array([1])
			self.T = np.array([500.0])

		elif CATE.arguments_load == True:

			data_comp_file = self.read_csv(filename = self.composition_args_path, delim = ',')

			for i in range(1,len(data_comp_file)):

				if data_comp_file[i][2] == 'CATE':
					if data_comp_file[i][3] == 'float':
						setattr(CATE, data_comp_file[i][0], np.array([float(data_comp_file[i][1])]))
					elif data_comp_file[i][3] == 'int':
						setattr(CATE, data_comp_file[i][0], int(data_comp_file[i][1]))

				elif data_comp_file[i][2] == 'self':
					if data_comp_file[i][3] == 'float':
						if ('frac' in data_comp_file[i][0]) == True:
							setattr(self, data_comp_file[i][0], np.array([float(data_comp_file[i][1])/1e2]))
						else:
							if data_comp_file[i][0] == 'p':
								setattr(self, data_comp_file[i][0], np.array([float(data_comp_file[i+1][1]) / 26.0]))
							else:
								setattr(self, data_comp_file[i][0], np.array([float(data_comp_file[i][1])]))
					elif data_comp_file[i][3] == 'int':
						setattr(self, data_comp_file[i][0], int(data_comp_file[i][1]))


		self.rock_cond_selections = [CATE.granite_cond_selection, CATE.granulite_cond_selection, CATE.sandstone_cond_selection, CATE.gneiss_cond_selection,
				   CATE.amphibolite_cond_selection, CATE.basalt_cond_selection, CATE.mud_cond_selection, CATE.gabbro_cond_selection, CATE.other_rock_cond_selection]

		self.minerals_cond_selections = [CATE.quartz_cond_selection, CATE.plag_cond_selection, CATE.amp_cond_selection, CATE.kfelds_cond_selection, CATE.pyx_cond_selection,
				   CATE.mica_cond_selection, CATE.clay_cond_selection, CATE.carbonate_cond_selection, CATE.garnet_cond_selection, CATE.sulphide_cond_selection,
				   CATE.graphite_cond_selection, CATE.other_cond_selection]

		self.composition_set = False

		#Setting up the blank canvas on the main page.

		self.canvas_widget = QFrame(self)
		self.canvas_widget.setGeometry(750,50,1000,925)
		self.canvas_widget.setStyleSheet("border:1.25px solid #768795")
		self.canvaslayout = QVBoxLayout(self.canvas_widget)

		#Using the internal matplotlib style ggplot
		plt.style.use('ggplot')
		self.fig = Figure()
		self.fig.patch.set_facecolor('#EFF0F1')

		self.canvas = FigureCanvas(self.fig)
		self.toolbar = NavigationToolbar(self.canvas, self)
		self.toolbar.setStyleSheet("QToolBar { border: 0px ; : #889DAE}")
		self.canvaslayout.addWidget(self.toolbar)
		self.canvaslayout.addWidget(self.canvas)

		#Reading parameter files...

		self.read_cond_models()
		self.read_params()

		#Defining buttons on the MainWindow
		properties_mark = QLabel(self)
		properties_mark.setText('Setup')
		properties_mark.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")
		properties_mark.move(65,35)

		#conductivity button

		cond_btn = QPushButton('Conductivity Models', self)
		cond_btn.move(10,65)
		cond_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		cond_btn.clicked.connect(self.conductivity_popup)
		self.cond_pop = None

		mix_btn = QPushButton('Phase Mixing', self)
		mix_btn.move(10,100)
		mix_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		mix_btn.clicked.connect(self.phase_mixing_popup)
		self.phs_mix_popup = None
		
		int_btn = QPushButton('Phase Interconnectivity', self)
		int_btn.move(10,135)
		int_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		int_btn.clicked.connect(self.phase_intercon_popup)
		self.phs_intercon_popup = None
		
		water_btn = QPushButton('Solid Phase Water Contents', self)
		water_btn.move(10,170)
		water_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		water_btn.clicked.connect(self.water_content_popup)
		self.water_phase_popup = None
		
		pt_mark = QLabel(self)
		pt_mark.setText('P-T')
		pt_mark.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")
		pt_mark.move(225,310)
		
		CATE.btn_pressure = QPushButton("Pressure (GPa)", self)
		CATE.btn_pressure.clicked.connect(self.get_pressure)
		CATE.btn_pressure.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.pressure_textbox = QLineEdit(str(self.depth[0] / 26.0), self)
		self.pressure_textbox.setEnabled(False)
		self.pressure_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_pressure.move(100,345)
		self.pressure_textbox.move(280,345)
		
		CATE.btn_depth = QPushButton("Depth (Km)", self)
		CATE.btn_depth.clicked.connect(self.get_depth)
		CATE.btn_depth.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.depth_textbox = QLineEdit(str(self.depth[0]), self)
		self.depth_textbox.setEnabled(False)
		self.depth_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_depth.move(100,380)
		self.depth_textbox.move(280,380)		
		
		CATE.btn_temp = QPushButton("Temperature (C)", self)
		CATE.btn_temp.clicked.connect(self.get_temp)
		CATE.btn_temp.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.temp_textbox = QLineEdit(str(self.T[0]), self)
		self.temp_textbox.setEnabled(False)
		self.temp_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_temp.move(100,415)
		self.temp_textbox.move(280,415)

		#radiobutton melt or fluid

		fluid_phases_mark = QLabel(self)
		fluid_phases_mark.setText('Fluid Phases')
		fluid_phases_mark.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")
		fluid_phases_mark.move(290,35)

		btn_fluid_phase_setup = QPushButton("Fluid Phase Setup", self)
		btn_fluid_phase_setup.clicked.connect(self.fluid_phase_popup)
		btn_fluid_phase_setup.setStyleSheet("QPushButton {min-width: 18em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		btn_fluid_phase_setup.move(200,65)
		self.fluid_melt_pop = None

		btn_melt_content= QPushButton("Fluid-Melt Content (%)", self)
		btn_melt_content.clicked.connect(self.get_fluid_melt_content)
		btn_melt_content.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.melt_content_textbox = QLineEdit(str(self.melt_fluid_mass_frac[0]*1e2), self)
		self.melt_content_textbox.setEnabled(False)
		self.melt_content_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		btn_melt_content.move(200,100)
		self.melt_content_textbox.move(370,100)

		CATE.btn_salinity_fluid= QPushButton("Fluid Salinity (%wt)", self)
		CATE.btn_salinity_fluid.clicked.connect(self.get_salinity)
		if CATE.fluid_or_melt_method == 0:
			CATE.btn_salinity_fluid.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.fluid_or_melt_method == 1:
			CATE.btn_salinity_fluid.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		CATE.btn_salinity_fluid.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.salinity_textbox = QLineEdit(str(self.salinity_fluid[0]), self)
		self.salinity_textbox.setEnabled(False)
		self.salinity_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_salinity_fluid.move(200,135)
		self.salinity_textbox.move(370,135)

		CATE.btn_co2_melt = QPushButton("Melt CO2 (ppm)", self)
		CATE.btn_co2_melt.clicked.connect(self.get_co2_melt)
		if CATE.fluid_or_melt_method == 1:
			CATE.btn_co2_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.fluid_or_melt_method == 0:
			CATE.btn_co2_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.co2_melt_textbox = QLineEdit(str(self.co2_melt[0]), self)
		self.co2_melt_textbox.setEnabled(False)
		self.co2_melt_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_co2_melt.move(200,170)
		self.co2_melt_textbox.move(370,170)

		CATE.btn_h2o_melt = QPushButton("Melt H2O (ppm)", self)
		CATE.btn_h2o_melt.clicked.connect(self.get_h2o_melt)
		if CATE.fluid_or_melt_method == 1:
			CATE.btn_h2o_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.fluid_or_melt_method == 0:
			CATE.btn_h2o_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.h2o_melt_textbox = QLineEdit(str(self.h2o_melt[0]), self)
		self.h2o_melt_textbox.setEnabled(False)
		self.h2o_melt_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_h2o_melt.move(200,205)
		self.h2o_melt_textbox.move(370,205)
		
		CATE.btn_nao_melt = QPushButton("Melt NaO (%wt)", self)
		CATE.btn_nao_melt.clicked.connect(self.get_nao_melt)
		if CATE.fluid_or_melt_method == 1:
			CATE.btn_nao_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.fluid_or_melt_method == 0:
			CATE.btn_nao_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.na2o_melt_textbox = QLineEdit(str(self.na2o_melt[0]), self)
		self.na2o_melt_textbox.setEnabled(False)
		self.na2o_melt_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_nao_melt.move(200,240)
		self.na2o_melt_textbox.move(370,240)

		CATE.btn_k2o_melt = QPushButton("Melt K2O (%wt)", self)
		CATE.btn_k2o_melt.clicked.connect(self.get_k2o_melt)
		if CATE.fluid_or_melt_method == 1:
			CATE.btn_k2o_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.fluid_or_melt_method == 0:
			CATE.btn_k2o_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.k2o_melt_textbox = QLineEdit(str(self.k2o_melt[0]), self)
		self.k2o_melt_textbox.setEnabled(False)
		self.k2o_melt_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_k2o_melt.move(200,275)
		self.k2o_melt_textbox.move(370,275)
		
		solid_phases_mark = QLabel(self)
		solid_phases_mark.setText('Solid Phases')
		solid_phases_mark.setStyleSheet("QLabel {font:bold}; min-width: 12em ; fontsize: 10pt;color: red")
		solid_phases_mark.move(200,440)

		btn_solid_phase_setup = QPushButton("Solid Phase Setup", self)
		btn_solid_phase_setup.clicked.connect(self.solid_phase_popup)
		btn_solid_phase_setup.setStyleSheet("QPushButton {min-width: 18em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		btn_solid_phase_setup.move(110,475)
		self.solid_phase_pop = None

		CATE.btn_bckgr_res = QPushButton("Backgr. Resistivity", self)
		CATE.btn_bckgr_res.clicked.connect(self.get_bckgr_res)
		if CATE.solid_phase_method == 0:
			CATE.btn_bckgr_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 1:
			CATE.btn_bckgr_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_bckgr_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.bckgr_res_textbox = QLineEdit(str(self.bckgr_res[0]), self)
		self.bckgr_res_textbox.setEnabled(False)
		self.bckgr_res_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_bckgr_res.move(10,510)
		self.bckgr_res_textbox.move(140,510)

		line_mark = QLabel(self)
		line_mark.setText('------------------------------------------')
		line_mark.setStyleSheet("QLabel {font:bold}; min-width: 100em ; fontsize: 10pt;color: red")
		line_mark.move(20,545)

		CATE.btn_granite_res = QPushButton("Granite", self)
		CATE.btn_granite_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.granite_frac_textbox, param = "granite_frac", rock = "Granite"))
		if CATE.solid_phase_method == 1:
			CATE.btn_granite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_granite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_granite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.granite_frac_textbox = QLineEdit(str(self.granite_frac[0]*1e2), self)
		self.granite_frac_textbox.setEnabled(False)
		self.granite_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_granite_res.move(10,580)
		self.granite_frac_textbox.move(140,580)

		CATE.btn_granulite_res = QPushButton("Granulite", self)
		CATE.btn_granulite_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.granulite_frac_textbox, param = "granulite_frac", rock = "Granulite"))
		if CATE.solid_phase_method == 1:
			CATE.btn_granulite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_granulite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_granulite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.granulite_frac_textbox = QLineEdit(str(self.granulite_frac[0]*1e2), self)
		self.granulite_frac_textbox.setEnabled(False)
		self.granulite_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_granulite_res.move(10,615)
		self.granulite_frac_textbox.move(140,615)

		CATE.btn_sandstone_res = QPushButton("Sandstone", self)
		CATE.btn_sandstone_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.sandstone_frac_textbox, param = "sandstone_frac", rock = "Sandstone"))
		if CATE.solid_phase_method == 1:
			CATE.btn_sandstone_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_sandstone_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_sandstone_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.sandstone_frac_textbox = QLineEdit(str(self.sandstone_frac[0]*1e2), self)
		self.sandstone_frac_textbox.setEnabled(False)
		self.sandstone_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_sandstone_res.move(10,650)
		self.sandstone_frac_textbox.move(140,650)

		CATE.btn_gneiss_res = QPushButton("Gneiss", self)
		CATE.btn_gneiss_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.gneiss_frac_textbox, param = "gneiss_frac", rock = "Gneiss"))
		if CATE.solid_phase_method == 1:
			CATE.btn_gneiss_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_gneiss_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_gneiss_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.gneiss_frac_textbox = QLineEdit(str(self.gneiss_frac[0]*1e2), self)
		self.gneiss_frac_textbox.setEnabled(False)
		self.gneiss_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_gneiss_res.move(250,580)
		self.gneiss_frac_textbox.move(380,580)

		CATE.btn_amphibolite_res = QPushButton("Amphibolite", self)
		CATE.btn_amphibolite_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.amphibolite_frac_textbox, param = "amphibolite_frac", rock = "Amphibolite"))
		if CATE.solid_phase_method == 1:
			CATE.btn_amphibolite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_amphibolite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_gneiss_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		self.amphibolite_frac_textbox = QLineEdit(str(self.amphibolite_frac[0]*1e2), self)
		self.amphibolite_frac_textbox.setEnabled(False)
		self.amphibolite_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_amphibolite_res.move(250,615)
		self.amphibolite_frac_textbox.move(380,615)
		
		CATE.btn_basalt_res = QPushButton("Basalt", self)
		CATE.btn_basalt_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.basalt_frac_textbox, param = "basalt_frac", rock = "Basalt"))
		if CATE.solid_phase_method == 1:
			CATE.btn_basalt_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_basalt_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_basalt_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")

		self.basalt_frac_textbox = QLineEdit(str(self.basalt_frac[0]*1e2), self)
		self.basalt_frac_textbox.setEnabled(False)
		self.basalt_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_basalt_res.move(250,650)
		self.basalt_frac_textbox.move(380,650)

		CATE.btn_mud_res = QPushButton("Mudstone/Shale", self)
		CATE.btn_mud_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.mud_frac_textbox, param = "mud_frac", rock = "Mudstone/Shale"))
		if CATE.solid_phase_method == 1:
			CATE.btn_mud_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_mud_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_mud_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")

		self.mud_frac_textbox = QLineEdit(str(self.mud_frac[0]*1e2), self)
		self.mud_frac_textbox.setEnabled(False)
		self.mud_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_mud_res.move(490,580)
		self.mud_frac_textbox.move(620,580)

		CATE.btn_gabbro_res = QPushButton("Gabbro", self)
		CATE.btn_gabbro_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.gabbro_frac_textbox, param = "gabbro_frac", rock = "Gabbro"))
		if CATE.solid_phase_method == 1:
			CATE.btn_gabbro_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_gabbro_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_gabbro_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")

		self.gabbro_frac_textbox = QLineEdit(str(self.gabbro_frac[0]*1e2), self)
		self.gabbro_frac_textbox.setEnabled(False)
		self.gabbro_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_gabbro_res.move(490,615)
		self.gabbro_frac_textbox.move(620,615)

		CATE.btn_other_rock_res = QPushButton("Other Rock", self)
		CATE.btn_other_rock_res.clicked.connect(lambda: self.get_rock_value(textbox_obj=self.other_rock_frac_textbox, param = "other_rock_frac", rock = "Other Rock"))
		if CATE.solid_phase_method == 1:
			CATE.btn_other_rock_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_other_rock_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_other_rock_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")

		self.other_rock_frac_textbox = QLineEdit(str(self.other_rock_frac[0]*1e2), self)
		self.other_rock_frac_textbox.setEnabled(False)
		self.other_rock_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_other_rock_res.move(490,650)
		self.other_rock_frac_textbox.move(620,650)
		
		total_label_1 = QLabel(self)
		total_label_1.setText('Total:')
		total_label_1.setStyleSheet("QLabel {font:bold}; min-width: 100em ; fontsize: 10pt;color: red")
		total_label_1.move(490,685)
		
		self.total_rock_textbox = QLineEdit(str(self.granite_frac[0]*1e2 + self.granulite_frac[0]*1e2 +\
							self.sandstone_frac[0]*1e2 + self.gneiss_frac[0]*1e2 + self.amphibolite_frac[0]*1e2 +\
							self.basalt_frac[0]*1e2 + self.mud_frac[0]*1e2 + self.gabbro_frac[0]*1e2 +\
								self.other_rock_frac[0]*1e2), self)
		self.total_rock_textbox.setEnabled(False)
		self.total_rock_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		self.total_rock_textbox.move(620,685)


		line_mark_2 = QLabel(self)
		line_mark_2.setText('------------------------------------------')
		line_mark_2.setStyleSheet("QLabel {font:bold}; min-width: 100em ; fontsize: 10pt;color: red")
		line_mark_2.move(20,685)

		CATE.btn_quartz_res = QPushButton("Quartz", self)
		CATE.btn_quartz_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.quartz_frac_textbox, param = "quartz_frac", mineral = "Quartz"))
		if CATE.solid_phase_method == 1:
			CATE.btn_quartz_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_quartz_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_quartz_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.quartz_frac_textbox = QLineEdit(str(self.quartz_frac[0]*1e2), self)
		self.quartz_frac_textbox.setEnabled(False)
		self.quartz_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_quartz_res.move(10,720)
		self.quartz_frac_textbox.move(140,720)

		CATE.btn_plag_res = QPushButton("Plagioclase", self)
		CATE.btn_plag_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.plag_frac_textbox, param = "plag_frac", mineral = "Plagioclase"))
		if CATE.solid_phase_method == 1:
			CATE.btn_plag_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_plag_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_plag_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.plag_frac_textbox = QLineEdit(str(self.plag_frac[0]*1e2), self)
		self.plag_frac_textbox.setEnabled(False)
		self.plag_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_plag_res.move(10,755)
		self.plag_frac_textbox.move(140,755)

		CATE.btn_amp_res = QPushButton("Amphibole", self)
		CATE.btn_amp_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.amp_frac_textbox, param = "amp_frac", mineral = "Amphibole"))
		if CATE.solid_phase_method == 1:
			CATE.btn_amp_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_amp_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_amp_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.amp_frac_textbox = QLineEdit(str(self.amp_frac[0]*1e2), self)
		self.amp_frac_textbox.setEnabled(False)
		self.amp_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_amp_res.move(10,790)
		self.amp_frac_textbox.move(140,790)
		
		CATE.btn_kfelds_res = QPushButton("K-Feldspar", self)
		CATE.btn_kfelds_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.kfelds_frac_textbox, param = "kfelds_frac", mineral = "K-Feldspar"))
		if CATE.solid_phase_method == 1:
			CATE.btn_kfelds_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_kfelds_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_kfelds_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.kfelds_frac_textbox = QLineEdit(str(self.kfelds_frac[0]*1e2), self)
		self.kfelds_frac_textbox.setEnabled(False)
		self.kfelds_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_kfelds_res.move(10,825)
		self.kfelds_frac_textbox.move(140,825)
		
		CATE.btn_pyx_res = QPushButton("Pyroxenes", self)
		CATE.btn_pyx_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.pyx_frac_textbox, param = "pyx_frac", mineral = "Pyroxene"))
		if CATE.solid_phase_method == 1:
			CATE.btn_pyx_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_pyx_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_pyx_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.pyx_frac_textbox = QLineEdit(str(self.pyx_frac[0]*1e2), self)
		self.pyx_frac_textbox.setEnabled(False)
		self.pyx_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_pyx_res.move(250,720)
		self.pyx_frac_textbox.move(380,720)

		CATE.btn_mica_res = QPushButton("Mica", self)
		CATE.btn_mica_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.mica_frac_textbox, param = "mica_frac", mineral = "Mica"))
		if CATE.solid_phase_method == 1:
			CATE.btn_mica_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_mica_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_mica_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.mica_frac_textbox = QLineEdit(str(self.mica_frac[0]*1e2), self)
		self.mica_frac_textbox.setEnabled(False)
		self.mica_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_mica_res.move(250,755)
		self.mica_frac_textbox.move(380,755)

		CATE.btn_clay_res = QPushButton("Clay", self)
		CATE.btn_clay_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.clay_frac_textbox, param = "clay_frac", mineral = "Clay"))
		if CATE.solid_phase_method == 1:
			CATE.btn_clay_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_clay_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_clay_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.clay_frac_textbox = QLineEdit(str(self.clay_frac[0]*1e2), self)
		self.clay_frac_textbox.setEnabled(False)
		self.clay_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_clay_res.move(250,790)
		self.clay_frac_textbox.move(380,790)

		CATE.btn_garnet_res = QPushButton("Garnet", self)
		CATE.btn_garnet_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.garnet_frac_textbox, param = "garnet_frac", mineral = "Garnet"))
		if CATE.solid_phase_method == 1:
			CATE.btn_garnet_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_garnet_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_garnet_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.garnet_frac_textbox = QLineEdit(str(self.garnet_frac[0]*1e2), self)
		self.garnet_frac_textbox.setEnabled(False)
		self.garnet_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_garnet_res.move(10,860)
		self.garnet_frac_textbox.move(140,860)

		CATE.btn_carbonates_res = QPushButton("Carbonates", self)
		CATE.btn_carbonates_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.carbonates_frac_textbox, param = "carbonate_frac", mineral = "Carbonate"))
		if CATE.solid_phase_method == 1:
			CATE.btn_carbonates_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_carbonates_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_carbonates_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")

		self.carbonates_frac_textbox = QLineEdit(str(self.carbonate_frac[0]*1e2), self)
		self.carbonates_frac_textbox.setEnabled(False)
		self.carbonates_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_carbonates_res.move(10,895)
		self.carbonates_frac_textbox.move(140,895)

		CATE.btn_graphite_res = QPushButton("Graphite", self)
		CATE.btn_graphite_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.graphite_frac_textbox, param = "graphite_frac", mineral = "Graphite"))
		if CATE.solid_phase_method == 1:
			CATE.btn_graphite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_graphite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_graphite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.graphite_frac_textbox = QLineEdit(str(self.graphite_frac[0]*1e2), self)
		self.graphite_frac_textbox.setEnabled(False)
		self.graphite_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_graphite_res.move(250,825)
		self.graphite_frac_textbox.move(380,825)

		CATE.btn_sulphides_res = QPushButton("Sulphides", self)
		CATE.btn_sulphides_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.sulphides_frac_textbox, param = "sulphide_frac", mineral = "Sulphides"))
		if CATE.solid_phase_method == 1:
			CATE.btn_sulphides_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_sulphides_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_sulphides_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.sulphides_frac_textbox = QLineEdit(str(self.sulphide_frac[0]*1e2), self)
		self.sulphides_frac_textbox.setEnabled(False)
		self.sulphides_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_sulphides_res.move(250,860)
		self.sulphides_frac_textbox.move(380,860)

		CATE.btn_other_res = QPushButton("Other", self)
		CATE.btn_other_res.clicked.connect(lambda: self.get_mineral_value(textbox_obj=self.other_frac_textbox, param = "other_frac", mineral = "Other"))
		if CATE.solid_phase_method == 1:
			CATE.btn_other_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 0:
			CATE.btn_other_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		elif CATE.solid_phase_method == 2:
			CATE.btn_other_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
		self.other_frac_textbox = QLineEdit(str(self.other_frac[0]*1e2), self)
		self.other_frac_textbox.setEnabled(False)
		self.other_frac_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		CATE.btn_other_res.move(250,895)
		self.other_frac_textbox.move(380,895)
		
		total_label_2 = QLabel(self)
		total_label_2.setText('Total:')
		total_label_2.setStyleSheet("QLabel {font:bold}; min-width: 100em ; fontsize: 10pt;color: red")
		total_label_2.move(250,930)
		
		self.total_min_textbox = QLineEdit(str(self.quartz_frac[0]*1e2 + self.plag_frac[0]*1e2 + self.kfelds_frac[0]*1e2 +\
						self.amp_frac[0]*1e2 + self.pyx_frac[0]*1e2 + self.mica_frac[0]*1e2 + self.clay_frac[0]*1e2 + self.carbonate_frac[0]*1e2 +\
						self.garnet_frac[0]*1e2 + self.sulphide_frac[0]*1e2 + self.graphite_frac[0]*1e2 + self.other_frac[0]*1e2), self)
		self.total_min_textbox.setEnabled(False)
		self.total_min_textbox.setStyleSheet("QlineEdit {min-width: 4em}")
		self.total_min_textbox.move(380,930)

		self.act_comp_btn = QPushButton('Plot Composition',self)
		self.act_comp_btn.move(550,65)
		self.act_comp_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #93db88}")
		self.act_comp_btn.clicked.connect(self.plot_composition_button)
		
		self.calc_cond_btn = QPushButton('Calculate Conductivity',self)
		self.calc_cond_btn.move(550,100)
		self.calc_cond_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #93db88}")
		self.calc_cond_btn.clicked.connect(self.calculate_conductivity_button)

		self.calc_cond_btn = QPushButton('Write Parameter File',self)
		self.calc_cond_btn.move(550,135)
		self.calc_cond_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #98249c}")
		self.calc_cond_btn.clicked.connect(self.savetextfile)

		self.cp_solid_val_btn = QPushButton('Copy Solid Cond. Clipboard', self)
		self.cp_solid_val_btn.move(550,170)
		self.cp_solid_val_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #3248a8}")
		self.cp_solid_val_btn.clicked.connect(lambda: self.cp_val_to_clipboard(param = 'solid'))

		self.cp_melt_fluid_val_btn = QPushButton('Copy Melt Cond. Clipboard', self)
		self.cp_melt_fluid_val_btn.move(550,205)
		self.cp_melt_fluid_val_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #3248a8}")
		self.cp_melt_fluid_val_btn.clicked.connect(lambda: self.cp_val_to_clipboard(param = 'melt_fluid'))

		self.cp_bulk_val_btn = QPushButton('Copy Bulk Cond. Clipboard', self)
		self.cp_bulk_val_btn.move(550,240)
		self.cp_bulk_val_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #3248a8}")
		self.cp_bulk_val_btn.clicked.connect(lambda: self.cp_val_to_clipboard(param = 'bulk'))

		self.show()
		
	def get_pressure(self):
		
		text, ok = QInputDialog.getText(self, 'Pressure Dialogue', 'Enter the value in (GPa):')
		if ok:
			try:
				float(text)
				if (float(text) > 0.0):
					self.pressure_textbox.setText(str(text))
					self.p = np.array([float(text)])
					self.depth = np.array([float(text) * 26.0]) #assuming a density of crust of 2.6 g/cm^3
					self.depth_textbox.setText(str(float(text) * 26.0))
				else:
					QMessageBox.about(self,"Warning!","Enter a value larger than 0")
			except ValueError:
				QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
				
	def get_depth(self):
		
		text, ok = QInputDialog.getText(self, 'Depth Dialogue', 'Enter the value in (km):')
		if ok:
			try:
				float(text)
				if (float(text) > 0.0):
					self.depth_textbox.setText(str(text))
					self.depth = np.array([float(text)])
					self.p = np.array([float(text) / 26.0]) #assuming a density of crust of 2.6 g/cm^3
					self.pressure_textbox.setText(str(float(text) / 26.0))
				else:
					QMessageBox.about(self,"Warning!","Enter a value larger than 0")
			except ValueError:
				QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		
	def get_temp(self):
	
		text, ok = QInputDialog.getText(self, 'Temperature Dialogue', 'Enter the value in (C):')
		if ok:
			try:
				float(text)
				if (float(text) > 0.0):
					self.temp_textbox.setText(str(text))
					self.T = np.array([float(text)])
				else:
					QMessageBox.about(self,"Warning!","Enter a value larger than 0")
			except ValueError:
				QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")

	def get_fluid_melt_content(self):

		text, ok = QInputDialog.getText(self, 'Melt Content Dialogue', 'Enter the value in (%):')
		if ok:
			try:
				float(text)
				if (float(text) <= 100.0) and (float(text) > 0.0):
					self.melt_content_textbox.setText(str(text))
					self.melt_fluid_mass_frac = np.array([float(text) / 1e2])
				else:
					QMessageBox.about(self,"Warning!","Enter a value between 0 and 100")
			except ValueError:
				QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		
	def get_salinity(self):

		if CATE.fluid_or_melt_method == 0:
			text, ok = QInputDialog.getText(self, 'Salinity Content Dialogue', 'Enter the value in (%):')
			if ok:
				try:
					float(text)
					self.salinity_textbox.setText(str(text))
					self.salinity_fluid = np.array([float(text)])
				except ValueError:
					QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		else:
			QMessageBox.about(self,"Warning!","Only fluids can have salinity. Now, the fluid phase is selected to be melt.")
		
	def get_co2_melt(self):

		if CATE.fluid_or_melt_method == 1:
			text, ok = QInputDialog.getText(self, 'CO2 Melt Dialogue', 'Enter the value in (ppm):')
			if ok:
				try:
					float(text)
					self.co2_melt_textbox.setText(str(text))
					self.co2_melt = np.array([float(text)])
				except ValueError:
					QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		else:
			QMessageBox.about(self,"Warning!","Only melts can have co2. Now, the phase is selected to be fluid.")
		
	def get_h2o_melt(self):

		if CATE.fluid_or_melt_method == 1:
			text, ok = QInputDialog.getText(self, 'H2O Melt Dialogue', 'Enter the value in (ppm):')
			if ok:
				try:
					float(text)
					self.h2o_melt_textbox.setText(str(text))
					self.h2o_melt = np.array([float(text)])
				except ValueError:
					QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		else:
			QMessageBox.about(self,"Warning!","Only melts can have strcutrally bounded h2o. Now, the phase is selected to be fluid.")
		
	def get_nao_melt(self):

		if CATE.fluid_or_melt_method == 1:
			text, ok = QInputDialog.getText(self, 'NaO Melt Dialogue', 'Enter the value in (%wt):')
			if ok:
				try:
					float(text)
					self.na2o_melt_textbox.setText(str(text))
					self.na2o_melt = np.array([float(text)])
				except ValueError:
					QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		else:
			QMessageBox.about(self,"Warning!","Only melts can have NaO in this software. Now, the phase is selected to be fluid.")

	def get_k2o_melt(self):

		if CATE.fluid_or_melt_method == 1:
			text, ok = QInputDialog.getText(self, 'K2O Melt Dialogue', 'Enter the value in (wt%):')
			if ok:
				try:
					float(text)
					self.k2o_melt_textbox.setText(str(text))
					self.k2o_melt = np.array([float(text)])
				except ValueError:
					QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		else:
			QMessageBox.about(self,"Warning!","Only melts can have K2O in this software. Now, the phase is selected to be fluid.")

	def get_bckgr_res(self):

		if CATE.solid_phase_method == 0:
			text, ok = QInputDialog.getText(self, 'Background Resistivity Dialogue', 'Enter the value in (ohm m):')
			if ok:
				try:
					float(text)
					self.bckgr_res_textbox.setText(str(text))
					self.bckgr_res = np.array([float(text)])
				except ValueError:
					QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		else:
			QMessageBox.about(self,"Warning!","You selected to use experimental conductivity measurements to build the solid phases. Choose the other option ot use this method.")
	
	def get_rock_value(self, textbox_obj,param,rock):

		if CATE.solid_phase_method == 1:
			text, ok = QInputDialog.getText(self, rock + 'volume dialogue', 'Enter the value in (%)')
			if ok:
				try:
					float(text)
					if (float(text) <= 100.0) and (float(text) >= 0.0):

						textbox_obj.setText(str(text))
						setattr(self, param, np.array([float(text) / 1e2]))
						self.total_rock_textbox.setText(str(self.granite_frac[0]*1e2 + self.granulite_frac[0]*1e2 +\
							self.sandstone_frac[0]*1e2 + self.gneiss_frac[0]*1e2 + self.amphibolite_frac[0]*1e2 +\
							self.basalt_frac[0]*1e2 + self.mud_frac[0]*1e2 + self.gabbro_frac[0]*1e2 +\
								self.other_rock_frac[0]*1e2))

					else:
						QMessageBox.about(self,"Warning!","Enter a value between 0 and 100")
				except ValueError:
					QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		else:
			QMessageBox.about(self,"Warning!","You selected to use the background resistivity mode. Choose the other option ot use experimental conductivity measurements to build a mixing model..")
	
	def get_mineral_value(self, textbox_obj, param, mineral):

		if CATE.solid_phase_method == 2:
			text, ok = QInputDialog.getText(self, mineral + 'volume dialogue', 'Enter the value in (%)')
			if ok:
				try:
					float(text)
					if (float(text) <= 100.0) and (float(text) >= 0.0):

						textbox_obj.setText(str(text))
						setattr(self, param, np.array([float(text) / 1e2]))
						self.total_min_textbox.setText(str(self.quartz_frac[0]*1e2 + self.plag_frac[0]*1e2 + self.kfelds_frac[0]*1e2 +\
						self.amp_frac[0]*1e2 + self.pyx_frac[0]*1e2 + self.mica_frac[0]*1e2 + self.clay_frac[0]*1e2 + self.carbonate_frac[0]*1e2 +\
						self.garnet_frac[0]*1e2 + self.sulphide_frac[0]*1e2 + self.graphite_frac[0]*1e2 + self.other_frac[0]*1e2))

					else:
						QMessageBox.about(self,"Warning!","Enter a value between 0 and 100")
				except ValueError:
					QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")
		else:
			QMessageBox.about(self,"Warning!","You selected to use the background resistivity or rock conductivity mode. Choose the other option ot use experimental conductivity measurements to build a mixing model..")
	
	def fluid_phase_popup(self):

		if self.fluid_melt_pop is None:
			self.fluid_melt_pop = FLUID_MELT_POP()
			self.fluid_melt_pop.setGeometry(QtCore.QRect(100, 500, 100, 100))
		self.fluid_melt_pop.show()

	def solid_phase_popup(self):

		if self.solid_phase_pop is None:
			self.solid_phase_pop = SOLID_PHASE_POP()
			self.solid_phase_pop.setGeometry(QtCore.QRect(100, 500, 400, 100))
		self.solid_phase_pop.show()


	def read_csv(self,filename,delim):

		#Simple function for reading csv files and give out filtered output for given delimiter (delim)

		file_obj = open(filename,'rt',encoding = "utf8") #Creating file object
		file_csv = csv.reader(file_obj,delimiter = delim) #Reading the file object with csv module, delimiter assigned to ','
		data = [] #Creating empty array to append data

		#Appending data from csb object
		for row in file_csv:
			data.append(row)

		#Filtering data for None elements read.
		for j in range(0,len(data)):
			data[j] = list(filter(None,data[j]))
		data = list(filter(None,data))

		return data

	def read_cond_models(self):

		#A function that reads conductivity model files and get the data.

		self.fluid_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'fluids.csv'),delim = ',') 
		self.melt_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'melt.csv'),delim = ',')

		#reading rocks
		self.granite_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'granite.csv'),delim = ',')
		self.granulite_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'granulite.csv'),delim = ',')
		self.sandstone_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'sandstone.csv'),delim = ',')
		self.gneiss_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'gneiss.csv'),delim = ',')
		self.amphibolite_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'amphibolite.csv'),delim = ',')
		self.basalt_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'basalt.csv'),delim = ',')
		self.mud_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'mud.csv'),delim = ',')
		self.gabbro_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'gabbro.csv'),delim = ',')
		self.other_rock_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'rocks', 'other_rock.csv'),delim = ',')

		#reading minerals
		self.quartz_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'quartz.csv'),delim = ',')
		self.plag_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'plag.csv'),delim = ',')
		self.amp_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'amp.csv'),delim = ',')
		self.kfelds_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'kfelds.csv'),delim = ',')
		self.pyx_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'pyx.csv'),delim = ',')
		self.mica_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'mica.csv'),delim = ',')
		self.clay_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'clay.csv'),delim = ',')
		self.carbonate_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'carbonates.csv'),delim = ',')
		self.garnet_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'garnet.csv'),delim = ',')
		self.sulphides_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'sulphides.csv'),delim = ',')
		self.graphite_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'graphite.csv'),delim = ',')
		self.other_cond_data = self.read_csv(os.path.join(self.core_path, 'cond_models' , 'minerals', 'other.csv'),delim = ',')
		

		self.cond_data_array = [self.fluid_cond_data, self.melt_cond_data, self.granite_cond_data, self.granulite_cond_data,
			  self.sandstone_cond_data, self.gneiss_cond_data, self.amphibolite_cond_data, self.basalt_cond_data, self.mud_cond_data,
			   self.gabbro_cond_data, self.other_rock_cond_data, self.quartz_cond_data, self.plag_cond_data,
			  self.amp_cond_data, self.kfelds_cond_data, self.pyx_cond_data, self.mica_cond_data, self.clay_cond_data,
			  self.carbonate_cond_data, self.garnet_cond_data, self.sulphides_cond_data, self.graphite_cond_data, self.other_cond_data]

		len_fluid = len(self.fluid_cond_data) - 1 
		len_melt = len(self.melt_cond_data) - 1

		self.fluid_num = 2

		len_granite = len(self.granite_cond_data) - 1
		len_granulite = len(self.granulite_cond_data) - 1
		len_sandstone = len(self.sandstone_cond_data) - 1
		len_gneiss = len(self.gneiss_cond_data) - 1
		len_amphibolite = len(self.amphibolite_cond_data) - 1
		len_basalt = len(self.basalt_cond_data) - 1
		len_mud = len(self.mud_cond_data) - 1
		len_gabbro = len(self.gabbro_cond_data) - 1
		len_other_rock = len(self.other_rock_cond_data) - 1
		
		self.rock_num = 9

		len_quartz = len(self.quartz_cond_data) - 1
		len_plag = len(self.plag_cond_data) - 1
		len_amp = len(self.amp_cond_data) - 1
		len_kfelds = len(self.kfelds_cond_data) - 1
		len_pyx = len(self.pyx_cond_data) - 1
		len_mica = len(self.mica_cond_data) - 1
		len_clay = len(self.clay_cond_data) - 1
		len_carbonate = len(self.carbonate_cond_data) - 1
		len_garnet = len(self.garnet_cond_data) - 1
		len_sulphides = len(self.sulphides_cond_data) - 1
		len_graphite = len(self.graphite_cond_data) - 1
		len_other = len(self.other_cond_data) - 1

		self.mineral_num = 12

		#Creating empty arrays for appending new data.
		CATE.name = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		CATE.type = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		CATE.t_min = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		CATE.t_max = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.p_min = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.p_max = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.w_calib = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.mg_cond = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.sigma_pol = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.sigma_pol_err = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.h_pol = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.h_pol_err = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.sigma_p = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.sigma_p_err = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.h_p = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.h_p_err = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.r = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.r_err = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.alpha_p = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.alpha_p_err = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.wtype = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]
		self.dens_mat = [[None] * len_fluid, [None] * len_melt, [None] * len_granite, [None] * len_granulite, [None] * len_sandstone, [None] * len_gneiss,
		   [None] * len_amphibolite, [None] * len_basalt, [None] * len_mud, [None] * len_gabbro, [None] * len_other_rock, [None] * len_quartz,
			[None] * len_plag, [None] * len_amp, [None] * len_kfelds, [None] * len_pyx, [None] * len_mica, [None] * len_clay,
		   [None] * len_carbonate, [None] * len_garnet, [None] * len_sulphides, [None] * len_graphite, [None] * len_other]

		#Filling up the arrays.
		for i in range(0,len(CATE.type)):
			count = 1
			for j in range(0,len(CATE.type[i])):
				CATE.name[i][count-1] = self.cond_data_array[i][count][0]
				CATE.type[i][count-1] = self.cond_data_array[i][count][1]
				CATE.t_min[i][count-1] = float(self.cond_data_array[i][count][2])
				CATE.t_max[i][count-1] = float(self.cond_data_array[i][count][3])
				self.p_min[i][count-1] = float(self.cond_data_array[i][count][4])
				self.p_max[i][count-1] = float(self.cond_data_array[i][count][5])
				self.w_calib[i][count-1] = int(self.cond_data_array[i][count][6])
				self.mg_cond[i][count-1] = float(self.cond_data_array[i][count][7])
				self.sigma_pol[i][count-1] = float(self.cond_data_array[i][count][8])
				self.sigma_pol_err[i][count-1] = float(self.cond_data_array[i][count][9])
				self.h_pol[i][count-1] = float(self.cond_data_array[i][count][10])
				self.h_pol_err[i][count-1] = float(self.cond_data_array[i][count][11])
				self.sigma_p[i][count-1] = float(self.cond_data_array[i][count][12])
				self.sigma_p_err[i][count-1] = float(self.cond_data_array[i][count][13])
				self.h_p[i][count-1] = float(self.cond_data_array[i][count][14])
				self.h_p_err[i][count-1] = float(self.cond_data_array[i][count][15])
				self.r[i][count-1] = float(self.cond_data_array[i][count][16])
				self.r_err[i][count-1] = float(self.cond_data_array[i][count][17])
				self.alpha_p[i][count-1] = float(self.cond_data_array[i][count][18])
				self.alpha_p_err[i][count-1] = float(self.cond_data_array[i][count][19])
				self.wtype[i][count-1] = int(self.cond_data_array[i][count][20])
				self.dens_mat[i][count-1] = float(self.cond_data_array[i][count][21])
			
				count += 1

	def read_params(self):

		#READING THE PARAMETERS IN PARAMS.CSV WHICH ARE GENERAL PHYSICAL CONSTANTS
		#AND PROPERTIES OF MATERIALS

		params_dat = self.read_csv(os.path.join(self.core_path, 'params.csv'), delim = ',')

		self.g = float(params_dat[0][1]) # in kg/
		self.R = float(params_dat[1][1])
		self.avog = float(params_dat[2][1])
		self.boltz = float(params_dat[3][1])
		self.el_q = float(params_dat[4][1])
		CATE.spreadsheet = str(params_dat[5][1])
		self.mu = 4.0 * np.pi * 10**(-7)

	def check_composition(self):

		continue_adjusting = True

		if CATE.solid_phase_method == 0:

			pass

		elif CATE.solid_phase_method == 1:

			tot = self.granite_frac[0] + self.granulite_frac[0] + self.sandstone_frac[0] +\
			self.gneiss_frac[0] + self.amphibolite_frac[0] + self.basalt_frac[0] + self.mud_frac[0] +\
				 self.gabbro_frac[0] + self.other_rock_frac[0]

			if (tot <= 0.99) and (tot >= 1.01):
				QMessageBox.about(self, "Warning!", "The total number of does not add up to 100%. Currently it is:  " + str(tot*1e2))
				continue_adjusting = False
		elif CATE.solid_phase_method == 2:

			tot = self.quartz_frac[0] + self.plag_frac[0] + self.amp_frac[0] + self.kfelds_frac[0] +\
			self.pyx_frac[0] + self.mica_frac[0] + self.clay_frac[0] + self.carbonate_frac[0] + self.garnet_frac[0] + self.sulphide_frac[0] + self.graphite_frac[0] +\
			self.other_frac[0]

			if (tot <= 0.99) and (tot > 1.01):
				QMessageBox.about(self, "Warning!", "The total number of does not add up to 100%. Currently it is:  " + str(tot*1e2))
				continue_adjusting = False

		return continue_adjusting
	
	def calculate_arrhenian_single(self, T, sigma, E, r=0, water=1):

		cond = (10.0**sigma) * (water**r) * np.exp((-E) / (self.R * T))

		return cond
	
	def calculate_fluids_conductivity(self, method, sol_idx = None):

		if method == 'array':
			idx_node = None
		elif method == 'index':
			idx_node = sol_idx

		cond_fluids = np.zeros(len(self.T))

		if CATE.type[0][CATE.fluid_cond_selection] == '0':

			self.melt_fluid_cond[idx_node] = self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_pol[0][CATE.fluid_cond_selection],
								   E = self.h_pol[0][CATE.fluid_cond_selection])
			
		elif CATE.type[0][CATE.fluid_cond_selection] == '1':

			self.melt_fluid_cond[idx_node] = self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_pol[0][CATE.fluid_cond_selection],
								   E = self.h_pol[0][CATE.fluid_cond_selection]) + self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_p[0][CATE.fluid_cond_selection],
								   E = self.h_p[0][CATE.fluid_cond_selection])
			
		elif CATE.type[0][CATE.fluid_cond_selection] == '3':

			if ('*' in CATE.name[0][CATE.fluid_cond_selection]) == True:

				fluids_odd_function = CATE.name[0][CATE.fluid_cond_selection].replace('*','')

			else:

				fluids_odd_function = CATE.name[0][CATE.fluid_cond_selection]

			cond_fluids[idx_node] = eval(fluids_odd_function + '(T = self.T[idx_node], P = self.p[idx_node], salinity = self.salinity_fluid[idx_node], method = method)')
	
		return cond_fluids

	def calculate_melt_conductivity(self, method, sol_idx = None):

		if method == 'array':
			idx_node = None
		elif method == 'index':
			idx_node = sol_idx

		cond_melt = np.zeros(len(self.T))

		if CATE.type[1][CATE.melt_cond_selection] == '0':

			self.melt_fluid_cond[idx_node] = self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_pol[1][CATE.melt_cond_selection],
								   E = self.h_pol[1][CATE.melt_cond_selection])
			
		elif CATE.type[1][CATE.melt_cond_selection] == '1':

			self.melt_fluid_cond[idx_node] = self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_pol[1][CATE.melt_cond_selection],
								   E = self.h_pol[1][CATE.melt_cond_selection]) + self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_p[1][CATE.melt_cond_selection],
								   E = self.h_p[1][CATE.melt_cond_selection])
			
		elif CATE.type[1][CATE.melt_cond_selection] == '3':

			if ('*' in CATE.name[1][CATE.melt_cond_selection]) == True:

				melt_odd_function = CATE.name[1][CATE.melt_cond_selection].replace('*','')

			else:

				melt_odd_function = CATE.name[1][CATE.melt_cond_selection]

			cond_melt[idx_node] = eval(melt_odd_function + '(T = self.T[idx_node], P = self.p[idx_node], Melt_H2O = self.h2o_melt[idx_node],' +
			'Melt_CO2 = self.co2_melt, Melt_Na2O = self.na2o_melt[idx_node], Melt_K2O = self.k2o_melt[idx_node], method = method)')
		
		return cond_melt

	def calculate_rock_conductivity(self, method, rock_idx = None, sol_idx = None, water_rock = None):

		if method == 'array':
			idx_node = None
		elif method == 'index':
			idx_node = sol_idx

		cond = np.zeros(len(self.T))

		rock_sub_idx = rock_idx - self.fluid_num

		if CATE.type[rock_idx][self.rock_cond_selections[rock_sub_idx]] == '0':

			cond[idx_node] = self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_pol[rock_idx][self.rock_cond_selections[rock_sub_idx]],
								   E = self.h_pol[rock_idx][self.rock_cond_selections[rock_sub_idx]])
			
		elif CATE.type[rock_idx][self.rock_cond_selections[rock_sub_idx]] == '1':

			cond[idx_node] = self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_pol[rock_idx][self.rock_cond_selections[rock_sub_idx]],
								   E = self.h_pol[rock_idx][self.rock_cond_selections[rock_sub_idx]]) + self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_p[rock_idx][self.rock_cond_selections[rock_sub_idx]],
								   E = self.h_p[rock_idx][self.rock_cond_selections[rock_sub_idx]])
			
		elif CATE.type[rock_idx][self.rock_cond_selections[rock_sub_idx]] == '3':

			if ('*' in CATE.name[rock_idx][self.rock_cond_selections[rock_sub_idx]]) == True:

				odd_function = CATE.name[rock_idx][self.rock_cond_selections[rock_sub_idx]].replace('*','')

			else:

				odd_function = CATE.name[rock_idx][self.rock_cond_selections[rock_sub_idx]]

			cond[idx_node] = eval(odd_function + '(T = self.T[idx_node], P = self.p[idx_node], water = water_rock, method = method)')

		return cond
	
	def calculate_mineral_conductivity(self, method, water_mineral, min_idx = None, sol_idx = None):

		if method == 'array':
			idx_node = None
		elif method == 'index':
			idx_node = sol_idx

		cond = np.zeros(len(self.T))

		min_sub_idx = min_idx - self.fluid_num - self.rock_num

		if CATE.type[min_idx][self.minerals_cond_selections[min_sub_idx]] == '0':

			cond[idx_node] = self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_pol[min_idx][self.minerals_cond_selections[min_sub_idx]],
								   E = self.h_pol[min_idx][self.minerals_cond_selections[min_sub_idx]])
			
		elif CATE.type[min_idx][self.minerals_cond_selections[min_sub_idx]] == '1':

			cond[idx_node] = self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_pol[min_idx][self.minerals_cond_selections[min_sub_idx]],
								   E = self.h_pol[min_idx][self.minerals_cond_selections[min_sub_idx]]) + self.calculate_arrhenian_single(T = self.T[idx_node],
								   sigma = self.sigma_p[min_idx][self.minerals_cond_selections[min_sub_idx]],
								   E = self.h_p[min_idx][self.minerals_cond_selections[min_sub_idx]])
			
		elif CATE.type[min_idx][self.minerals_cond_selections[min_sub_idx]] == '3':

			if ('*' in CATE.name[min_idx][self.minerals_cond_selections[min_sub_idx]]) == True:

				odd_function = CATE.name[min_idx][self.minerals_cond_selections[min_sub_idx]].replace('*','')

			else:

				odd_function = CATE.name[min_idx][self.minerals_cond_selections[min_sub_idx]]

			cond[idx_node] = eval(odd_function + '(T = self.T[idx_node], P = self.p[idx_node], water = water_mineral, method = method)')

		return cond
	
	def phase_mixing_function(self, method = None, melt_method = None, indexing_method = None, sol_idx = None):

		self.bulk_cond = np.zeros(len(self.T)) #setting up an empty bulk conductivity array for all methods
		self.dens_melt_fluid = np.zeros(len(self.T))

		if indexing_method == 'array':
			idx_node = None
		elif indexing_method == 'index':
			idx_node = sol_idx
			
		if method == 0:

			#Calculating phase exponent of the abundant mineral to make connectedness equal to unity.
			#From Glover (2010, Geophysics), analytic solution.

			#creating search limits for different indexing methods.
			if indexing_method == 'array':
				start_idx = 0
				end_idx = len(self.T)
			elif indexing_method == 'index':
				start_idx = sol_idx
				end_idx = sol_idx + 1
				
			for i in range(start_idx,end_idx):
			
				if CATE.solid_phase_method == 1:
					phase_list = [self.granite_frac[i],self.granulite_frac[i],self.sandstone_frac[i],
					self.gneiss_frac[i], self.amphibolite_frac[i], self.basalt_frac[i], self.mud_frac[i],
					 self.gabbro_frac[i], self.other_rock_frac[i]]
					m_list = [CATE.granite_m[i],CATE.granulite_m[i],CATE.sandstone_m[i],
					CATE.gneiss_m[i], CATE.amphibolite_m[i], CATE.basalt_m[i], self.mud_m[i],
					 self.gabbro_m[i], CATE.other_rock_m[i]]
				elif CATE.solid_phase_method == 2:
					phase_list = [self.quartz_frac[i], self.plag_frac[i], self.amp_frac[i], self.kfelds_frac[i],
					self.pyx_frac[i], self.mica_frac[i], self.clay_frac[i], self.carbonate_frac[i], self.garnet_frac[i],
					self.sulphide_frac[i], self.graphite_frac[i], self.other_frac[i]]
					m_list = [CATE.quartz_m[i], CATE.plag_m[i], CATE.amp_m[i], CATE.kfelds_m[i],
					CATE.pyx_m[i], CATE.mica_m[i], CATE.clay_m[i], CATE.carbonate_m[i], CATE.garnet_m[i],
					CATE.sulphide_m[i], CATE.graphite_m[i], CATE.other_m[i]]
					
				frac_abundant = max(phase_list) #fraction of abundant mineral
				idx_max_ph = phase_list.index(frac_abundant) #index of the abundant mineral
				del phase_list[idx_max_ph] #deleting the abundant mineral form local list
				del m_list[idx_max_ph] #deleting the exponent of the abundant mineral from local list
				connectedness = np.asarray(phase_list)**np.asarray(m_list) #calculating the connectedness of the rest

				if sum(phase_list) != 0.0:
					m_abundant = np.log(1.0 - np.sum(connectedness)) / np.log(frac_abundant) #analytic solution to the problem
				else:
					m_abundant = 1

				if CATE.solid_phase_method == 1:
					
					if idx_max_ph == 0:
						CATE.granite_m[idx_node] = m_abundant
					elif idx_max_ph == 1:
						CATE.granulite_m[idx_node] = m_abundant
					elif idx_max_ph == 2:
						CATE.sandstone_m[idx_node] = m_abundant
					elif idx_max_ph == 3:
						CATE.gneiss_m[idx_node] = m_abundant
					elif idx_max_ph == 4:
						CATE.amphibolite_m[idx_node] = m_abundant
					elif idx_max_ph == 5:
						CATE.basalt_m[idx_node] = m_abundant
					elif idx_max_ph == 6:
						CATE.mud_m[idx_node] = m_abundant
					elif idx_max_ph == 7:
						CATE.gabbro_m[idx_node] = m_abundant
					elif idx_max_ph == 8:
						CATE.other_rock_m[idx_node] = m_abundant
					
					self.bulk_cond[idx_node] = (self.granite_cond[idx_node]*(self.granite_frac[idx_node]**CATE.granite_m[idx_node])) +\
					(self.granulite_cond[idx_node]*(self.granulite_frac[idx_node]**CATE.granulite_m[idx_node])) +\
					(self.sandstone_cond[idx_node]*(self.sandstone_frac[idx_node]**CATE.sandstone_m[idx_node])) +\
					(self.gneiss_cond[idx_node]*(self.gneiss_frac[idx_node]**CATE.gneiss_m[idx_node])) +\
					(self.amphibolite_cond[idx_node]*(self.amphibolite_frac[idx_node]**CATE.amphibolite_m[idx_node])) +\
					(self.basalt_cond[idx_node]*(self.basalt_frac[idx_node]**CATE.basalt_m[idx_node])) +\
					(self.mud_cond[idx_node]*(self.mud_frac[idx_node]**CATE.mud_m[idx_node])) +\
					(self.gabbro_cond[idx_node]*(self.gabbro_frac[idx_node]**CATE.gabbro_m[idx_node])) +\
					(self.other_rock_cond[idx_node]*(self.other_rock_frac[idx_node]**CATE.other_rock_m[idx_node]))
				
				elif CATE.solid_phase_method == 2:
					if idx_max_ph == 0:
						CATE.quartz_m[idx_node] = m_abundant
					elif idx_max_ph == 1:
						CATE.plag_m[idx_node] = m_abundant
					elif idx_max_ph == 2:
						CATE.amp_m[idx_node] = m_abundant
					elif idx_max_ph == 3:
						CATE.kfelds_m[idx_node] = m_abundant
					elif idx_max_ph == 4:
						CATE.pyx_m[idx_node] = m_abundant
					elif idx_max_ph == 5:
						CATE.mica_m[idx_node] = m_abundant
					elif idx_max_ph == 6:
						CATE.clay_m[idx_node] = m_abundant
					elif idx_max_ph == 7:
						CATE.carbonate_m[idx_node] = m_abundant
					elif idx_max_ph == 8:
						CATE.garnet_m[idx_node] = m_abundant
					elif idx_max_ph == 9:
						CATE.sulphide_m[idx_node] = m_abundant
					elif idx_max_ph == 10:
						CATE.graphite_m[idx_node] = m_abundant
					elif idx_max_ph == 11:
						CATE.other_m[idx_node] = m_abundant
						
					self.bulk_cond[idx_node] = (self.quartz_cond[idx_node]*(self.quartz_frac[idx_node]**CATE.quartz_m[idx_node])) +\
					(self.plag_cond[idx_node]*(self.plag_frac[idx_node]**CATE.plag_m[idx_node])) +\
					(self.amp_cond[idx_node]*(self.amp_frac[idx_node]**CATE.amp_m[idx_node])) +\
					(self.kfelds_cond[idx_node]*(self.kfelds_frac[idx_node]**CATE.kfelds_m[idx_node])) +\
					(self.pyx_cond[idx_node]*(self.pyx_frac[idx_node]**CATE.pyx_m[idx_node])) +\
					(self.mica_cond[idx_node]*(self.mica_frac[idx_node]**CATE.mica_m[idx_node])) +\
					(self.clay_cond[idx_node]*(self.clay_frac[idx_node]**CATE.clay_m[idx_node])) +\
					(self.carbonate_cond[idx_node]*(self.carbonate_frac[idx_node]**CATE.carbonate_m[idx_node])) +\
					(self.garnet_cond[idx_node]*(self.garnet_frac[idx_node]**CATE.garnet_m[idx_node])) +\
					(self.sulphide_cond[idx_node]*(self.sulphide_frac[idx_node]**CATE.sulphide_m[idx_node])) +\
					(self.graphite_cond[idx_node]*(self.graphite_frac[idx_node]**CATE.graphite_m[idx_node])) +\
					(self.other_cond[idx_node]*(self.other_frac[idx_node]**CATE.other_m[idx_node]))
					
		elif method == 1:
			
			if indexing_method == 'array':
				
				self.bulk_cond = np.zeros(len(self.ol_cond))
				start_idx = 0
				end_idx = len(self.T)
			elif indexing_method == 'index':
				start_idx = sol_idx
				end_idx = sol_idx + 1
				
			for i in range(start_idx,end_idx):
				
				if CATE.solid_phase_method == 1:
					list_i = [self.granite_cond[i], self.granulite_cond[i], self.sandstone_cond[i],
					self.gneiss_cond[i],self.amphibolite_cond[i], self.basalt_cond[i], self.mud_cond[i],
					  self.gabbro_cond, self.other_rock_cond[i]]
				elif CATE.solid_phase_method == 2:
					list_i = [self.quartz_cond[i], self.plag_cond[i], self.amp_cond[i],
					self.kfelds_cond[i],self.pyx_cond[i],self.mica_cond[i],self.clay_cond[i],self.carbonate_cond[i],
					self.garnet_cond[i],self.sulphide_cond[i],self.graphite_cond[i],self.other_cond[i]]				
					
				while True:
				
					#while loop for deleting the zero arrays that could be encountered due to non-existence of the mineral.
					
					min_local = np.amin(np.asarray(list_i))
				
					if (min_local != 0.0):
						
						break
					
					else:
					
						list_i = np.delete(list_i, np.argwhere(list_i == 0))
						
				if CATE.solid_phase_method == 1:
				
					self.bulk_cond[i] = (((self.granite_frac[i] / (self.granite_cond[i] + (2*min_local))) +\
					(self.granulite_frac[i] / (self.granulite_cond[i] + (2*min_local))) +\
					(self.sandstone_frac[i] / (self.sandstone_cond[i] + (2*min_local))) +\
					(self.gneiss_frac[i] / (self.gneiss_cond[i] + (2*min_local))) +\
					(self.amphibolite_frac[i] / (self.amphibolite_cond[i] + (2*min_local))) +\
					(self.basalt_frac[i] / (self.basalt_cond[i] + (2*min_local))) +\
					(self.mud_frac[i] / (self.mud_cond[i] + (2*min_local))) +\
					(self.gabbro_frac[i] / (self.gabbro_cond[i] + (2*min_local))) +\
					(self.other_rock_frac[i] / (self.other_rock_cond[i] + (2*min_local))))**(-1.0)) -\
					2.0*min_local
						
				elif CATE.solid_phase_method == 2:
				
					self.bulk_cond[i] = (((self.quartz_frac[i] / (self.quartz_cond[i] + (2*min_local))) +\
					(self.plag_frac[i] / (self.plag_cond[i] + (2*min_local))) +\
					(self.amp_frac[i] / (self.amp_cond[i] + (2*min_local))) +\
					(self.kfelds_frac[i] / (self.kfelds_cond[i] + (2*min_local))) +\
					(self.pyx_frac[i] / (self.pyx_cond[i] + (2*min_local))) +\
					(self.mica_frac[i] / (self.mica_cond[i] + (2*min_local))) +\
					(self.clay_frac[i] / (self.clay_cond[i] + (2*min_local))) +\
					(self.carbonate_frac[i] / (self.carbonate_cond[i] + (2*min_local))) +\
					(self.garnet_frac[i] / (self.garnet_cond[i] + (2*min_local))) +\
					(self.sulphide_frac[i] / (self.sulphide_cond[i] + (2*min_local))) +\
					(self.graphite_frac[i] / (self.graphite_cond[i] + (2*min_local))) +\
					(self.other_frac[i] / (self.other_cond[i] + (2*min_local)))
					)**(-1.0)) -\
					2.0*min_local
					
		elif method == 2:
		
			if indexing_method == 'array':
				
				self.bulk_cond = np.zeros(len(self.ol_cond))
				start_idx = 0
				end_idx = len(self.T)
			elif indexing_method == 'index':
				start_idx = sol_idx
				end_idx = sol_idx + 1
				
			for i in range(start_idx,end_idx):
				
				if CATE.solid_phase_method == 1:
					list_i = [self.granite_cond[i], self.granulite_cond[i], self.sandstone_cond[i],
					self.gneiss_cond[i],self.amphibolite_cond[i], self.basalt_cond[i], self.mud_cond[i],
					  self.gabbro_cond, self.other_rock_cond[i]]
				elif CATE.solid_phase_method == 2:
					list_i = [self.quartz_cond[i], self.plag_cond[i], self.amp_cond[i],
					self.kfelds_cond[i],self.pyx_cond[i],self.mica_cond[i],self.clay_cond[i],
					self.carbonate_cond[i], self.garnet_cond[i],self.sulphide_cond[i],
					self.graphite_cond[i],self.other_cond[i]]				
					
				while True:
				
					#while loop for deleting the zero arrays that could be encountered due to non-existence of the mineral.
					
					max_local = np.amax(np.asarray(list_i))
				
					if (max_local != 0.0):
						
						break
					
					else:
					
						list_i = np.delete(list_i, np.argwhere(list_i == 0))
						
				if CATE.solid_phase_method == 1:
				
					self.bulk_cond[i] = (((self.granite_frac[i] / (self.granite_cond[i] + (2*max_local))) +\
					(self.granulite_frac[i] / (self.granulite_cond[i] + (2*max_local))) +\
					(self.sandstone_frac[i] / (self.sandstone_cond[i] + (2*max_local))) +\
					(self.gneiss_frac[i] / (self.gneiss_cond[i] + (2*max_local))) +\
					(self.amphibolite_frac[i] / (self.amphibolite_cond[i] + (2*max_local))) +\
					(self.basalt_frac[i] / (self.basalt_cond[i] + (2*max_local))) +\
					(self.mud_frac[i] / (self.mud_cond[i] + (2*max_local))) +\
					(self.gabbro_frac[i] / (self.gabbro_cond[i] + (2*max_local))) +\
					(self.other_rock_frac[i] / (self.other_rock_cond[i] + (2*max_local))))**(-1.0)) -\
					2.0*max_local
						
				elif CATE.solid_phase_method == 2:
				
					self.bulk_cond[i] = (((self.quartz_frac[i] / (self.quartz_cond[i] + (2*max_local))) +\
					(self.plag_frac[i] / (self.plag_cond[i] + (2*max_local))) +\
					(self.amp_frac[i] / (self.amp_cond[i] + (2*max_local))) +\
					(self.kfelds_frac[i] / (self.kfelds_cond[i] + (2*max_local))) +\
					(self.pyx_frac[i] / (self.pyx_cond[i] + (2*max_local))) +\
					(self.mica_frac[i] / (self.mica_cond[i] + (2*max_local))) +\
					(self.clay_frac[i] / (self.clay_cond[i] + (2*max_local))) +\
					(self.carbonate_frac[i] / (self.carbonate_cond[i] + (2*min_local))) +\
					(self.garnet_frac[i] / (self.garnet_cond[i] + (2*min_local))) +\
					(self.sulphide_frac[i] / (self.sulphide_cond[i] + (2*min_local))) +\
					(self.graphite_frac[i] / (self.graphite_cond[i] + (2*min_local))) +\
					(self.other_frac[i] / (self.other_cond[i] + (2*min_local)))					
					)**(-1.0)) -\
					2.0*max_local
					
		elif method == 3:
		
			#Parallel model for maximum, minimum bounds and neutral w/o errors
			
			if CATE.solid_phase_method == 1:
				self.bulk_cond[idx_node] = (self.granite_frac[idx_node]*self.granite_cond[idx_node]) +\
				(self.granulite_frac[idx_node]*self.granulite_cond[idx_node]) +\
				(self.sandstone_frac[idx_node]*self.sandstone_cond[idx_node]) +\
				(self.gneiss_frac[idx_node]*self.gneiss_cond[idx_node]) +\
				(self.amphibolite_frac[idx_node]*self.amphibolite_cond[idx_node]) +\
				(self.basalt_frac[idx_node]*self.basalt_cond[idx_node]) +\
				(self.mud_frac[idx_node]*self.mud_cond[idx_node]) +\
				(self.gabbro_frac[idx_node]*self.gabbro_cond[idx_node]) +\
				(self.other_rock_frac[idx_node]*self.other_rock_cond[idx_node])
				
			elif CATE.solid_phase_method == 2:
			
				self.bulk_cond[idx_node] = (self.quartz_frac[idx_node]*self.quartz_cond[idx_node]) +\
				(self.plag_frac[idx_node]*self.plag_cond[idx_node]) +\
				(self.amp_frac[idx_node]*self.amp_cond[idx_node]) +\
				(self.kfelds_frac[idx_node]*self.kfelds_cond[idx_node]) +\
				(self.pyx_frac[idx_node]*self.pyx_cond[idx_node]) +\
				(self.mica_frac[idx_node]*self.mica_cond[idx_node]) +\
				(self.clay_frac[idx_node]*self.clay_cond[idx_node]) +\
				(self.carbonate_frac[idx_node]*self.carbonate_cond[idx_node]) +\
				(self.garnet_frac[idx_node]*self.garnet_cond[idx_node]) +\
				(self.sulphide_frac[idx_node]*self.sulphide_cond[idx_node]) +\
				(self.graphite_frac[idx_node]*self.graphite_cond[idx_node]) +\
				(self.other_frac[idx_node]*self.other_cond[idx_node])
				
				
		elif method == 4:
		
			if indexing_method == 'array':
				self.bulk_cond = np.zeros(len(self.ol_cond))
				start_idx = 0
				end_idx = len(self.T)
			elif indexing_method == 'index':
				start_idx = sol_idx
				end_idx = sol_idx + 1

			#Perpendicular model for maximum, minimum bounds and neutral w/o errors				
			if CATE.solid_phase_method == 1:
				for i in range(start_idx,end_idx):
					if self.granite_frac[i] == 0.0:
						self.granite_cond[i] = -999
					if self.granulite_frac[i] == 0.0:
						self.granulite_cond[i] = -999
					if self.sandstone_frac[i] == 0.0:
						self.sandstone_cond[i] = -999
					if self.gneiss_frac[i] == 0.0:
						self.gneiss_cond[i] = -999
					if self.amphibolite_frac[i] == 0.0:
						self.amphibolite_cond[i] = -999
					if self.basalt_frac[i] == 0.0:
						self.basalt_cond[i] = -999
					if self.mud_frac[i] == 0.0:
						self.mud_cond[i] = -999
					if self.gabbro_frac[i] == 0.0:
						self.gabbro_cond[i] = -999
					if self.other_rock_frac[i] == 0.0:
						self.other_rock_cond[i] = -999
	
				self.bulk_cond[idx_node] = 1.0 / ((self.granite_frac[idx_node] / self.granite_cond[idx_node]) +\
				(self.granulite_frac[idx_node] / self.granulite_cond[idx_node]) +\
				(self.sandstone_frac[idx_node] / self.sandstone_cond[idx_node]) +\
				(self.gneiss_frac[idx_node] / self.gneiss_cond[idx_node]) +\
				(self.amphibolite_frac[idx_node] / self.amphibolite_cond[idx_node]) +\
				(self.basalt_frac[idx_node] / self.basalt_cond[idx_node]) +\
				(self.mud_frac[idx_node] / self.mud_cond[idx_node]) +\
				(self.gabbro_frac[idx_node] / self.gabbro_cond[idx_node]) +\
				(self.other_rock_frac[idx_node] / self.other_rock_cond[idx_node]))
				
			elif CATE.solid_phase_method == 2:
			
				for i in range(start_idx,end_idx):
					if self.quartz_frac[i] == 0.0:
						self.quartz_cond[i] = -999
					if self.plag_frac[i] == 0.0:
						self.plag_cond[i] = -999
					if self.amp_frac[i] == 0.0:
						self.amp_cond[i] = -999
					if self.kfelds_frac[i] == 0.0:
						self.kfelds_cond[i] = -999
					if self.pyx_frac[i] == 0.0:
						self.pyx_cond[i] = -999
					if self.mica_frac[i] == 0.0:
						self.mica_cond[i] = -999
					if self.clay_frac[i] == 0.0:
						self.clay_cond[i] = -999
					if self.carbonate_frac[i] == 0.0:
						self.carbonate_cond[i] = -999
					if self.garnet_frac[i] == 0.0:
						self.garnet_cond[i] = -999
					if self.sulphide_frac[i] == 0.0:
						self.sulphide_cond[i] = -999
					if self.graphite_frac[i] == 0.0:
						self.graphite_cond[i] = -999
					if self.other_frac[i] == 0.0:
						self.other_cond[i] = -999
	
				self.bulk_cond[idx_node] = 1.0 / ((self.quartz_frac[idx_node] / self.quartz_cond[idx_node]) +\
				(self.plag_frac[idx_node] / self.plag_cond[idx_node]) +\
				(self.amp_frac[idx_node] / self.amp_cond[idx_node]) +\
				(self.kfelds_frac[idx_node] / self.kfelds_cond[idx_node]) +\
				(self.pyx_frac[idx_node] / self.pyx_cond[idx_node]) +\
				(self.mica_frac[idx_node] / self.mica_cond[idx_node]) +\
				(self.clay_frac[idx_node] / self.clay_cond[idx_node]) +\
				(self.carbonate_frac[idx_node] / self.carbonate_cond[idx_node]) +\
				(self.garnet_frac[idx_node] / self.garnet_cond[idx_node]) +\
				(self.sulphide_frac[idx_node] / self.sulphide_cond[idx_node]) +\
				(self.graphite_frac[idx_node] / self.graphite_cond[idx_node]) +\
				(self.other_frac[idx_node] / self.other_cond[idx_node]))
				
		elif method == 5:
		
			#Random model for maximum, minimum bounds and neutral w/o errors
			
			if CATE.solid_phase_method == 1:
				
				self.bulk_cond[idx_node] = (self.granite_cond[idx_node]**self.granite_frac[idx_node]) *\
				(self.granulite_cond[idx_node]**self.granulite_frac[idx_node]) *\
				(self.sandstone_cond[idx_node]**self.sandstone_frac[idx_node]) *\
				(self.gneiss_cond[idx_node]**self.gneiss_frac[idx_node]) *\
				(self.amphibolite_cond[idx_node]**self.amphibolite_frac[idx_node]) *\
				(self.basalt_cond[idx_node]**self.basalt_frac[idx_node]) *\
				(self.mud_cond[idx_node]**self.mud_frac[idx_node]) *\
				(self.gabbro_cond[idx_node]**self.gabbro_frac[idx_node]) *\
				(self.other_rock_cond[idx_node]**self.other_rock_frac[idx_node]) 
				
			elif CATE.solid_phase_method == 2:

				self.bulk_cond[idx_node] = (self.quartz_cond[idx_node]**self.quartz_frac[idx_node]) *\
				(self.plag_cond[idx_node]**self.plag_frac[idx_node]) *\
				(self.amp_cond[idx_node]**self.amp_frac[idx_node]) *\
				(self.kfelds_cond[idx_node]**self.kfelds_frac[idx_node]) *\
				(self.pyx_cond[idx_node]**self.pyx_frac[idx_node]) *\
				(self.mica_cond[idx_node]**self.mica_frac[idx_node]) *\
				(self.clay_cond[idx_node]**self.clay_frac[idx_node]) *\
				(self.carbonate_cond[idx_node]**self.carbonate_frac[idx_node]) *\
				(self.garnet_cond[idx_node]**self.garnet_frac[idx_node]) *\
				(self.sulphide_cond[idx_node]**self.sulphide_frac[idx_node]) *\
				(self.graphite_cond[idx_node]**self.graphite_frac[idx_node]) *\
				(self.other_cond[idx_node]**self.other_frac[idx_node])
				
		elif method == -1:
			
			#In case the bulk conductivity is determined by a solid phase conductivity entry...
			
			self.bulk_cond = self.bckgr_res

		self.solid_phase_cond = np.array(self.bulk_cond)
			
		#Calculations regarding solid phases and fluid phases mixing take place after this.
		#checking if there's any melt/fluid on the list at all.
		if np.mean(self.melt_fluid_mass_frac) != 0:
			
			if CATE.fluid_or_melt_method == 0:
				
				dens = iapws.iapws08.SeaWater(T = self.T[idx_node], P = self.p[idx_node], S = 0)
				self.dens_melt_fluid[idx_node] = dens.rho / 1e3
				
			elif CATE.fluid_or_melt_method == 1:
				
				self.dens_melt_dry = float(self.dens_mat[1][CATE.melt_cond_selection]) / 1e3 #index 1 is equate to melt
				#Determining xvol, first have to calculate the density of the melt from Sifre et al. (2014)
				
				self.dens_melt_fluid[idx_node] = (((self.h2o_melt[idx_node] * 1e-4) / 1e2) * 1.4) +\
				(((self.co2_melt[idx_node] * 1e-4) / 1e2) * 2.4) + (1 - (((self.h2o_melt[idx_node] * 1e-4) +\
				(self.co2_melt[idx_node] * 1e-4)) / 1e2)) * self.dens_melt_dry #calculating how much volatiles changed its density
				
			if indexing_method == 'array':
				self.melt_fuid_frac = np.zeros(len(self.melt_fluid_mass_frac))
				start_idx = 0
				end_idx = len(self.T)
			elif indexing_method == 'index':
				start_idx = sol_idx
				end_idx = sol_idx + 1

			self.melt_fluid_frac = np.zeros(len(self.melt_fluid_mass_frac))

			for i in range(start_idx,end_idx):
				if self.melt_fluid_mass_frac[i] != 0.0:
					self.melt_fluid_frac[i] = 1.0 / (1 + (((1.0/self.melt_fluid_mass_frac[i]) - 1) * (self.dens_melt_fluid[i] / (self.density_solids[i] / 1e3))))
	
	
			if melt_method == 0:

				#Modified Archie's Law taken from Glover et al. (2000) from eq. 8

				for i in range(start_idx,end_idx):

					if self.melt_fluid_mass_frac[i] != 0.0:

						p = np.log10(1.0 - self.melt_fluid_frac[i]**CATE.melt_fluid_m[i]) / np.log10(1.0 - self.melt_fluid_frac[i])

						self.bulk_cond[i] = (self.bulk_cond[i] * (1.0 - self.melt_fluid_frac[i])**p) + (self.melt_fluid_cond[i] * (self.melt_fluid_frac[i]**CATE.melt_fluid_m[i]))
							
			elif melt_method == 1:

				#Tubes model for melt and solid mixture from ten Grotenhuis et al. (2005) eq.5

				self.bulk_cond[idx_node] = ((1.0/3.0) * self.melt_fluid_frac[idx_node] * self.melt_fluid_cond[idx_node]) + ((1.0 - self.melt_fluid_frac[idx_node]) * self.bulk_cond[idx_node])
				
			elif melt_method == 2:

				#Spheres model for melt ans solid mixture got from ten Grotenhuis et al. (2005), eq.3

				self.bulk_cond[idx_node] = self.melt_fluid_cond[idx_node] + ((1.0 - self.melt_fluid_frac[idx_node]) / ((1.0 / (self.bulk_cond[idx_node] - self.melt_fluid_cond[idx_node])) +\
				 	(self.melt_fluid_frac[idx_node] / (3.0 * self.melt_fluid_cond[idx_node]))))
			
			elif melt_method == 3:
			
				#Modified brick-layer model from Schilling et al. (1997)

				ones = (1.0 - self.melt_fluid_frac[idx_node])
				two_thirds = (1.0 - self.melt_fluid_frac[idx_node])**(2.0/3.0)

				self.bulk_cond[idx_node] = self.melt_fluid_cond[idx_node] * (((self.melt_fluid_cond[idx_node] * (two_thirds - 1.0)) - (self.bulk_cond[idx_node] * two_thirds)) /\
				((self.bulk_cond[idx_node] * (ones - two_thirds)) + (self.melt_fluid_cond[idx_node] * (two_thirds - ones - 1.0))))
				
			elif melt_method == 4:
			
				#Hashin-shtrikman upper bound from Glover et al. (2000)
				vol_matrix = 1.0 - self.melt_fluid_frac[idx_node]

				self.bulk_cond[idx_node] = self.melt_fluid_cond[idx_node] * (1 -\
				((3 * vol_matrix * (self.melt_fluid_cond[idx_node] - self.bulk_cond[idx_node])) /\
				(3 * self.melt_fluid_cond[idx_node] - (self.melt_fluid_frac[idx_node] * (self.melt_fluid_cond[idx_node] - self.bulk_cond[idx_node])))))
				
			elif melt_method == 5:
			
				#Hashin-shtrikman lower bound from Glover et al. (2000)
				vol_matrix = 1.0 - self.melt_fluid_frac[idx_node]

				self.bulk_cond[idx_node] = self.bulk_cond[idx_node] * (1 +\
				((3 * self.melt_fluid_frac[idx_node] * (self.melt_fluid_cond[idx_node] - self.bulk_cond[idx_node])) /\
				(3 * self.bulk_cond[idx_node] + (vol_matrix * (self.melt_fluid_cond[idx_node] - self.bulk_cond[idx_node])))))

	def calculate_density_solid(self):
		
		if CATE.solid_phase_method == 1:
		
			dens_list = [float(self.dens_mat[2][CATE.granite_cond_selection])/1e3,
			float(self.dens_mat[3][CATE.granulite_cond_selection])/1e3,
			float(self.dens_mat[4][CATE.sandstone_cond_selection])/1e3,
			float(self.dens_mat[5][CATE.gneiss_cond_selection])/1e3,
			float(self.dens_mat[6][CATE.amphibolite_cond_selection])/1e3,
			float(self.dens_mat[7][CATE.basalt_cond_selection])/1e3,
			float(self.dens_mat[8][CATE.mud_cond_selection])/1e3,
			float(self.dens_mat[9][CATE.gabbro_cond_selection])/1e3,
			float(self.dens_mat[10][CATE.other_rock_cond_selection])/1e3]
			
			self.density_solids = np.zeros(len(self.T))
			
			for i in range(0,len(self.T)):
			
				density_indv = 0.0
				
				phase_list = [self.granite_frac[i],self.granulite_frac[i],self.sandstone_frac[i],
						self.gneiss_frac[i], self.amphibolite_frac[i], self.basalt_frac[i], self.mud_frac[i],
						 self.gabbro_frac[i], self.other_rock_frac[i]]
				
				for j in range(0,len(phase_list)):
					density_indv = density_indv + (phase_list[j] * dens_list[j])
					
				self.density_solids[i] = density_indv
				
			
		elif CATE.solid_phase_method == 2:
		
			dens_list = [float(self.dens_mat[7][CATE.quartz_cond_selection])/1e3,
			float(self.dens_mat[8][CATE.plag_cond_selection])/1e3,
			float(self.dens_mat[9][CATE.amp_cond_selection])/1e3,
			float(self.dens_mat[10][CATE.kfelds_cond_selection])/1e3,
			float(self.dens_mat[11][CATE.pyx_cond_selection])/1e3,
			float(self.dens_mat[12][CATE.mica_cond_selection])/1e3,
			float(self.dens_mat[13][CATE.clay_cond_selection])/1e3,
			float(self.dens_mat[13][CATE.carbonate_cond_selection])/1e3,
			float(self.dens_mat[13][CATE.garnet_cond_selection])/1e3,
			float(self.dens_mat[13][CATE.sulphide_cond_selection])/1e3,
			float(self.dens_mat[13][CATE.graphite_cond_selection])/1e3,
			float(self.dens_mat[13][CATE.other_cond_selection])/1e3]
			
			self.density_solids = np.zeros(len(self.T))
			
			for i in range(0,len(self.T)):
			
				density_indv = 0.0
				
				phase_list = [self.quartz_frac[i], self.plag_frac[i], self.amp_frac[i], self.kfelds_frac[i],
					self.pyx_frac[i], self.mica_frac[i], self.clay_frac[i], self.carbonate_frac[i], self.garnet_frac[i],
					self.sulphide_frac[i], self.graphite_frac[i], self.other_frac[i]]
				
				for j in range(0,len(phase_list)):
					density_indv = density_indv + (phase_list[j] * dens_list[j])
					
				self.density_solids[i] = density_indv
								
	def calculate_conductivity_single(self, method = None):
	
		if CATE.fluid_or_melt_method == 0:
			self.melt_fluid_cond = self.calculate_fluids_conductivity(method= method, sol_idx = 0)
		elif CATE.fluid_or_melt_method == 1:
			self.melt_fluid_cond = self.calculate_melt_conductivity(method = method, sol_idx = 0)
	
		if CATE.solid_phase_method == 0:

			self.phase_mixing_function(method == -1, melt_method = CATE.phs_melt_mix_method, indexing_method= method, sol_idx = 0)
			
		elif CATE.solid_phase_method == 1:
		
			if self.granite_frac[0] != 0:
				self.granite_cond = self.calculate_rock_conductivity(method = method, rock_idx= 2, sol_idx = 0)
			else:
				self.granite_cond = np.array([0])
				
			if self.granulite_frac[0] != 0:
				self.granulite_cond = self.calculate_rock_conductivity(method = method, rock_idx= 3, sol_idx = 0)
			else:
				self.granulite_cond = np.array([0])
				
			if self.sandstone_frac[0] != 0:
				self.sandstone_cond = self.calculate_rock_conductivity(method = method, rock_idx= 4, sol_idx = 0)
			else:
				self.sandstone_cond = np.array([0])
				
			if self.gneiss_frac[0] != 0:
				self.gneiss_cond = self.calculate_rock_conductivity(method = method, rock_idx= 5, sol_idx = 0)
			else:
				self.gneiss_cond = np.array([0])
				
			if self.amphibolite_frac[0] != 0:
				self.amphibolite_cond = self.calculate_rock_conductivity(method = method, rock_idx= 6, sol_idx = 0)
			else:
				self.amphibolite_cond = np.array([0])

			if self.basalt_frac[0] != 0:
				self.basalt_cond = self.calculate_rock_conductivity(method = method, rock_idx= 7, sol_idx = 0)
			else:
				self.basalt_cond = np.array([0])

			if self.mud_frac[0] != 0:
				self.mud_cond = self.calculate_rock_conductivity(method = method, rock_idx= 8, sol_idx = 0)
			else:
				self.mud_cond = np.array([0])

			if self.gabbro_frac[0] != 0:
				self.gabbro_cond = self.calculate_rock_conductivity(method = method, rock_idx= 9, sol_idx = 0)
			else:
				self.gabbro_cond = np.array([0])

			if self.other_rock_frac[0] != 0:
				self.other_rock_cond = self.calculate_rock_conductivity(method = method, rock_idx= 10, sol_idx = 0)
			else:
				self.other_rock_cond = np.array([0])
				
		
			self.phase_mixing_function(method == CATE.phs_mix_method, melt_method = CATE.phs_melt_mix_method, indexing_method= method, sol_idx = 0)
			
		elif CATE.solid_phase_method == 2:
		
			if self.quartz_frac[0] != 0:
				self.quartz_cond = self.calculate_mineral_conductivity(method = method, min_idx= 11, sol_idx = 0)
			else:
				self.quartz_cond = np.array([0])
				
			if self.plag_frac[0] != 0:
				self.plag_cond = self.calculate_mineral_conductivity(method = method, min_idx= 12, sol_idx = 0)
			else:
				self.plag_cond = np.array([0])
				
			if self.amp_frac[0] != 0:
				self.amp_cond = self.calculate_mineral_conductivity(method = method, min_idx= 13, sol_idx = 0)
			else:
				self.amp_cond = np.array([0])
				
			if self.kfelds_frac[0] != 0:
				self.kfelds_cond = self.calculate_mineral_conductivity(method = method, min_idx= 14, sol_idx = 0)
			else:
				self.kfelds_cond = np.array([0])
				
			if self.pyx_frac[0] != 0:
				self.pyx_cond = self.calculate_mineral_conductivity(method = method, min_idx= 15, sol_idx = 0)
			else:
				self.pyx_cond = np.array([0])
				
			if self.mica_frac[0] != 0:
				self.mica_cond = self.calculate_mineral_conductivity(method = method, min_idx= 16, sol_idx = 0)
			else:
				self.mica_cond = np.array([0])
				
			if self.clay_frac[0] != 0:
				self.clay_cond = self.calculate_mineral_conductivity(method = method, min_idx= 17, sol_idx = 0)
			else:
				self.clay_cond = np.array([0])

			if self.carbonate_frac[0] != 0:
				self.carbonate_cond = self.calculate_mineral_conductivity(method = method, min_idx= 18, sol_idx = 0)
			else:
				self.carbonate_cond = np.array([0])

			if self.garnet_frac[0] != 0:
				self.garnet_cond = self.calculate_mineral_conductivity(method = method, min_idx= 19, sol_idx = 0)
			else:
				self.garnet_cond = np.array([0])

			if self.sulphide_frac[0] != 0:
				self.sulphide_cond = self.calculate_mineral_conductivity(method = method, min_idx= 20, sol_idx = 0)
			else:
				self.sulphide_cond = np.array([0])

			if self.graphite_frac[0] != 0:
				self.graphite_cond = self.calculate_mineral_conductivity(method = method, min_idx= 21, sol_idx = 0)
			else:
				self.graphite_cond = np.array([0])

			if self.other_frac[0] != 0:
				self.other_cond = self.calculate_mineral_conductivity(method = method, min_idx= 22, sol_idx = 0)
			else:
				self.other_cond = np.array([0])

			
				
			self.phase_mixing_function(method == CATE.phs_mix_method, melt_method = CATE.phs_melt_mix_method, indexing_method= method, sol_idx = 0)
		self.cond_calculated = True
	
	def plot_composition(self, method = None):

		if method == 'draw':
			
			self.ax0 = plt.subplot2grid((16,16),(0,0), rowspan = 4,colspan = 3, fig = self.fig)
			self.ax1 = plt.subplot2grid((16,16),(0,6), rowspan = 4,colspan = 3, fig = self.fig)
			
		elif method == 'save':
		
			self.figure_comp_save = plt.figure(figsize = (2,7))
			self.ax0 = plt.subplot(111)
			
		self.label_general_rocks = ['Granite', 'Granulite', 'Sandstone', 'Gneiss', 'Amphibolite', 'Basalt', 'Mudstone/Shale', 'Gabbro', 'Other Rock']
		self.color_general_rocks = ['#e016c2',"#52081b","#f0cf6e","#cbe0c3","#41453f", "#32a852"] #cansu
		labels = []
		label_colors = []
		
		self.label_general_mins = ['Quartz', 'Plagioclase', 'Amphibole', 'K-Feldspar', 'Pyroxenes', 'Mica', 'Clay', 'Carbonate',
				 'Garnet', 'Sulphide', 'Graphite', 'Other']
		self.color_general_mins = ["#f7f7d7","#fad9a0", "#bfbab2", "#fa5f93", "#3747b0", "#36cf45", "#574018", "#14b8c7","#ad0f1f", "#8810a3"
		, "#2b292b", "#32a852"] #cansu
				
		if CATE.solid_phase_method == 0:
			self.solid_phase_array = np.array([100])
			labels = ['Rock\n Assemblage']
			label_colors = ['#70653f']
		elif CATE.solid_phase_method == 1:
			
			self.solid_phase_array = []
			solid_phase_array = [self.granite_frac, self.granulite_frac,self.sandstone_frac,
			self.gneiss_frac,self.amphibolite_frac,self.basalt_frac,self.mud_frac,self.gabbro_frac,self.other_rock_frac]
			
			for i in range(0,len(solid_phase_array)):
				if solid_phase_array[i][0] != 0.0:
					self.solid_phase_array.append(solid_phase_array[i][0]*1e2)
					labels.append(self.label_general_rocks[i])
					label_colors.append(self.color_general_rocks[i])
					
		elif CATE.solid_phase_method == 2:
		
			self.solid_phase_array = []
			solid_phase_array = [self.quartz_frac, self.plag_frac, self.kfelds_frac, self.amp_frac, self.pyx_frac,
			self.mica_frac,self.clay_frac,self.carbonate_frac,self.garnet_frac,self.sulphide_frac,self.graphite_frac,self.other_frac]
			
			for i in range(0,len(solid_phase_array)):
				if solid_phase_array[i][0] != 0.0:
					
					self.solid_phase_array.append(solid_phase_array[i][0]*1e2)
					labels.append(self.label_general_mins[i])
					label_colors.append(self.color_general_mins[i])
					
					
		solid = (1 - self.melt_fluid_mass_frac[0]) * 1e2
		liquid = self.melt_fluid_mass_frac[0] * 1e2
		
		sol_liq_array = []
		labels_fs = []
		color_fs = []
		
		if solid != 0:
			sol_liq_array.append(solid)
			labels_fs.append('Solid')
			color_fs.append('#70653f')
		
		if liquid != 0:
		
			sol_liq_array.append(liquid)
			
			if CATE.fluid_or_melt_method == 1:
				label_f = 'Melt'
				color_f = '#912c10'
			else:
				label_f = 'Fluid'
				color_f = '#24abad'
		
			labels_fs.append(label_f)
			color_fs.append(color_f)
		
		self.ax0.pie(self.solid_phase_array, labels = labels, colors = label_colors,radius = 2,autopct='%1.1f%%')
		self.ax1.pie(sol_liq_array, labels = labels_fs, colors = color_fs,radius = 2, autopct='%1.1f%%')
		
		if method == 'draw':
		
			self.canvas.draw()

	def plot_conductivity(self, method = None):

		if method == 'draw':
			
			self.ax2 = plt.subplot2grid((16,16),(10,0), rowspan = 6,colspan = 16, fig = self.fig)
			self.ax2.grid(None)
			self.ax2.axis('off')
			
		elif method == 'save':
		
			self.figure_comp_save = plt.figure(figsize = (2,7))
			fontsize_labels = 10
			self.ax2 = plt.subplot(111)

		if (self.melt_fluid_cond[0] <= 1e-3):
			res_melt = '% .5E' % (1.0/self.melt_fluid_cond[0])
		else:
			res_melt = (1.0/self.melt_fluid_cond[0])

		if np.mean(self.melt_fluid_mass_frac != 0.0):
			self.ax2.text(0,4,'Melt/Fluid Conductivity:' + str('% .5E' % self.melt_fluid_cond[0]) + ' S/m  or ' + str(res_melt) + r' $\Omega$m', fontsize = 13, fontstyle = 'normal')
		
		if (self.solid_phase_cond[0] <= 1e-3):
			res_solid = '% .5E' % (1.0/self.solid_phase_cond[0])
		else:
			res_solid = (1.0/self.solid_phase_cond[0])
		
		self.ax2.text(0,2,'Bulk Solid Phases Conductivity:' + str('% .5E' % self.solid_phase_cond[0]) + ' S/m  or ' + str(res_solid) + r' $\Omega$m', fontsize = 13, fontstyle = 'normal')
		
		if (self.bulk_cond[0] <= 1e-3):
			res_bulk = '% .5E' % (1.0/self.bulk_cond[0])
		else:
			res_bulk = (1.0/self.bulk_cond[0])
		self.ax2.text(0,0,'Bulk Electrical Conductivity:' + str('% .5E' % self.bulk_cond[0]) + ' S/m  or ' + str(res_bulk) + r' $\Omega$m', fontsize = 13, fontstyle = 'normal')
		
		self.ax2.set_ylim(0,6)
		if method == 'draw':

			self.canvas.draw()

	def info_main(self):
		QMessageBox.about(self, "INFO GENERAL", "TBW.")

	def plot_composition_button(self):
	
		bool_comp = self.check_composition()

		if bool_comp == True:

			self.plot_composition(method = 'draw')
			self.act_comp_btn.setStyleSheet("QPushButton {min-width: 10em; font: bold; font-size: 9pt;background-color: #679c5f}")
			self.composition_set = True
			
	def calculate_conductivity_button(self):
	
		if self.composition_set == True:
			
			self.calculate_density_solid()
			self.calculate_conductivity_single(method = 'index')
			self.plot_conductivity(method = 'draw')
			
	def conductivity_popup(self):

		if self.cond_pop is None:
			self.cond_pop = COND_POP()
			self.cond_pop.setGeometry(QtCore.QRect(1000, 700, 100, 100))
		self.cond_pop.show()

	def phase_mixing_popup(self):

		if self.phs_mix_popup is None:
			self.phs_mix_popup = PHS_MIX_POP()
			self.phs_mix_popup.setGeometry(QtCore.QRect(100, 100, 1000, 200))
		self.phs_mix_popup.show()
		
	def phase_intercon_popup(self):
	
		if self.phs_intercon_popup is None:
			self.phs_intercon_popup = PHS_INTER_POP()
			self.phs_intercon_popup.setGeometry(QtCore.QRect(100, 100, 300, 200))
		self.phs_intercon_popup.show()

	def water_content_popup(self):

		if self.water_phase_popup is None:
			self.water_phase_popup = WATER_PHS_POP()
			self.water_phase_popup.setGeometry(QtCore.QRect(100, 100, 300, 200))
		self.water_phase_popup.show()

	def savetextfile(self):

		self.write_file_save_name = QFileDialog.getSaveFileName(self, 'Save File')

		if self.write_file_save_name[0] != '':

			lines = ['Parameter,Value,Objects,Type,Description,Unit\n']

			for i in range(1,len(self.init_params)):

				if self.init_params[i][2] == 'CATE':
					val = getattr(CATE,self.init_params[i][0])
				elif self.init_params[i][2] == 'self':
					val = getattr(self,self.init_params[i][0])
				try:
					if ('frac' in self.init_params[i][0]) == True:
						lines.append(','.join((self.init_params[i][0],str(val[0] * 1e2),self.init_params[i][2],self.init_params[i][3],self.init_params[i][4], self.init_params[i][5] + '\n')))
					else:
						lines.append(','.join((self.init_params[i][0],str(val[0]),self.init_params[i][2],self.init_params[i][3],self.init_params[i][4], self.init_params[i][5] + '\n')))
				except TypeError:
					lines.append(','.join((self.init_params[i][0],str(int(val)),self.init_params[i][2],self.init_params[i][3],self.init_params[i][4], self.init_params[i][5] + '\n')))

			filesave_composition = open(self.write_file_save_name[0] ,'w')
			filesave_composition.writelines(lines)
			filesave_composition.close()

			QMessageBox.about(self, 'Hey sup!', "Files are saved at the chosen location ")

	def cp_val_to_clipboard(self,param):
		
		if self.cond_calculated == True:
			if self.clipping == True:
				if param == 'solid':
					pyperclip.copy(str(self.solid_phase_cond[0]))
				elif param == 'melt_fluid':
					if np.mean(self.melt_fluid_mass_frac) != 0:
						pyperclip.copy(str(self.melt_fluid_cond[0]))
					else:
						QMessageBox.about(self, 'Warning!', "There is not melt/fluid entered in the composition...")
				elif param == 'bulk':
					pyperclip.copy(str(self.bulk_cond[0]))
			else:
				QMessageBox.about(self, 'Warning!', "To use this functionality, you have to install the 'pyperclip' library first!")
		else:
			QMessageBox.about(self, 'Warning!', "You have to calculate the conductivities first!")

class FLUID_MELT_POP(QWidget):

	def __init__(self):

		QWidget.__init__(self)

		fluid_melt_layout = QVBoxLayout(self)

		fluid_melt_label = QLabel(self)
		fluid_melt_label.setText('Select the fluid phase')
		fluid_melt_label.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")


		fluid_melt_btg = QButtonGroup(self)

		self.btn_fom_1 = QRadioButton("Fluid")
		self.btn_fom_1.toggled.connect(lambda:self.btnstate_fluidormelt(self.btn_fom_1))
		self.btn_fom_2 = QRadioButton("Melt")
		self.btn_fom_2.toggled.connect(lambda:self.btnstate_fluidormelt(self.btn_fom_2))

		if CATE.fluid_or_melt_method == 0:
			self.btn_fom_1.setChecked(True)
		elif CATE.fluid_or_melt_method == 1:
			self.btn_fom_2.setChecked(True)

		fluid_melt_btg.addButton(self.btn_fom_1)
		fluid_melt_btg.addButton(self.btn_fom_2)

		fluid_melt_layout.addWidget(fluid_melt_label)
		fluid_melt_layout.addWidget(self.btn_fom_1)
		fluid_melt_layout.addWidget(self.btn_fom_2)

	def btnstate_fluidormelt(self,b):

		if b.text() == "Fluid":
			if b.isChecked() == True:
				CATE.fluid_or_melt_method = 0
				CATE.btn_salinity_fluid.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_co2_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_h2o_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_nao_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_k2o_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		if b.text() == "Melt":
			if b.isChecked() == True:
				CATE.fluid_or_melt_method = 1
				CATE.btn_salinity_fluid.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_co2_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_h2o_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_nao_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_k2o_melt.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")


class SOLID_PHASE_POP(QWidget):

	def __init__(self):

		QWidget.__init__(self)

		layout = QVBoxLayout(self)

		main_label = QLabel(self)
		main_label.setText('Select the solid phase option.')
		main_label.setStyleSheet("QLabel {font:bold};min-width: 10em; fontsize: 10pt;color: red")

		solid_phase_btg = QButtonGroup(self)

		self.btn_sphase_1 = QRadioButton("Background Resistivity Entry")
		self.btn_sphase_1.toggled.connect(lambda:self.btnstate_solid_phase_setup(self.btn_sphase_1))
		self.btn_sphase_2 = QRadioButton("Experimental Conductivity Measurements of Rocks")
		self.btn_sphase_2.toggled.connect(lambda:self.btnstate_solid_phase_setup(self.btn_sphase_2))
		self.btn_sphase_3 = QRadioButton("Experimental Conductivity Measurements of Minerals")
		self.btn_sphase_3.toggled.connect(lambda:self.btnstate_solid_phase_setup(self.btn_sphase_3))

		if CATE.solid_phase_method == 0:
			self.btn_sphase_1.setChecked(True)
		elif CATE.solid_phase_method == 1:
			self.btn_sphase_2.setChecked(True)
		elif CATE.solid_phase_method == 2:
			self.btn_sphase_3.setChecked(True)

		solid_phase_btg.addButton(self.btn_sphase_1)
		solid_phase_btg.addButton(self.btn_sphase_2)
		solid_phase_btg.addButton(self.btn_sphase_3)

		layout.addWidget(main_label)
		layout.addWidget(self.btn_sphase_1)
		layout.addWidget(self.btn_sphase_2)
		layout.addWidget(self.btn_sphase_3)

	def btnstate_solid_phase_setup(self,b):

		if b.text() == "Background Resistivity Entry":
			if b.isChecked() == True:
				CATE.solid_phase_method = 0
				CATE.btn_bckgr_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_granite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_granulite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_sandstone_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_gneiss_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_amphibolite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_basalt_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_mud_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_gabbro_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_other_rock_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_quartz_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_plag_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_amp_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_kfelds_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_pyx_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_mica_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_clay_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_carbonates_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_garnet_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_sulphides_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_graphite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_other_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		if b.text() == "Experimental Conductivity Measurements of Rocks":
			if b.isChecked() == True:
				CATE.solid_phase_method = 1
				CATE.btn_bckgr_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_granite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_granulite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_sandstone_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_gneiss_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_amphibolite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_basalt_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_mud_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_gabbro_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_other_rock_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_quartz_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_plag_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_amp_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_kfelds_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_pyx_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_mica_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_clay_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_carbonates_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_garnet_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_sulphides_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_graphite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_other_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
		if b.text() == "Experimental Conductivity Measurements of Minerals":
			if b.isChecked() == True:
				CATE.solid_phase_method = 2
				CATE.btn_bckgr_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_granite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_granulite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_sandstone_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_gneiss_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_amphibolite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_basalt_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_mud_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_gabbro_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_other_rock_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #6b786e}")
				CATE.btn_quartz_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_plag_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_amp_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_kfelds_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_pyx_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_mica_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_clay_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_carbonates_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_garnet_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_sulphides_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_graphite_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")
				CATE.btn_other_res.setStyleSheet("QPushButton {min-width: 8em; font: bold; font-size: 9pt;background-color: #c8cccc}")

class COND_POP(QWidget):
	
	def __init__(self):

		QWidget.__init__(self)

		conduc_layout = QFormLayout(self)

		self.melt_cond_btn = QPushButton('Melt Model')
		self.melt_cond_text_box = QLineEdit(CATE.name[0][CATE.melt_cond_selection])
		self.melt_cond_text_box.setEnabled(False)
		self.melt_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.melt_cond_text_box, param = "melt_cond_selection", name_index = 0))

		self.fluid_cond_btn = QPushButton('Fluid Model')
		self.fluid_cond_text_box = QLineEdit(CATE.name[1][CATE.fluid_cond_selection])
		self.fluid_cond_text_box.setEnabled(False)
		self.fluid_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.melt_cond_text_box, param = "fluid_cond_selection", name_index = 1))

		self.granite_cond_btn = QPushButton('Granite Model')
		self.granite_cond_text_box = QLineEdit(CATE.name[2][CATE.granite_cond_selection])
		self.granite_cond_text_box.setEnabled(False)
		self.granite_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.granite_cond_text_box, param = "granite_cond_selection", name_index = 2))

		self.granulite_cond_btn = QPushButton('Granulite Model')
		self.granulite_cond_text_box = QLineEdit(CATE.name[3][CATE.granulite_cond_selection])
		self.granulite_cond_text_box.setEnabled(False)
		self.granulite_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.granulite_cond_text_box, param = "granulite_cond_selection", name_index = 3))

		self.sandstone_cond_btn = QPushButton('Sandstone Model')
		self.sandstone_cond_text_box = QLineEdit(CATE.name[4][CATE.sandstone_cond_selection])
		self.sandstone_cond_text_box.setEnabled(False)
		self.sandstone_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.sandstone_cond_text_box, param = "sandstone_cond_selection", name_index = 4))

		self.gneiss_cond_btn = QPushButton('Gneiss Model')
		self.gneiss_cond_text_box = QLineEdit(CATE.name[5][CATE.gneiss_cond_selection])
		self.gneiss_cond_text_box.setEnabled(False)
		self.gneiss_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.gneiss_cond_text_box, param = "gneiss_cond_selection", name_index =5))

		self.amphibolite_cond_btn = QPushButton('Amphibolite Model')
		self.amphibolite_cond_text_box = QLineEdit(CATE.name[6][CATE.amphibolite_cond_selection])
		self.amphibolite_cond_text_box.setEnabled(False)
		self.amphibolite_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.amphibolite_cond_text_box, param = "amphibolite_cond_selection", name_index = 6))

		self.basalt_cond_btn = QPushButton('Basalt Model')
		self.basalt_cond_text_box = QLineEdit(CATE.name[7][CATE.basalt_cond_selection])
		self.basalt_cond_text_box.setEnabled(False)
		self.basalt_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.basalt_cond_text_box, param = "basalt_cond_selection", name_index = 7))

		self.mud_cond_btn = QPushButton('Mudstone/Shale Model')
		self.mud_cond_text_box = QLineEdit(CATE.name[8][CATE.mud_cond_selection])
		self.mud_cond_text_box.setEnabled(False)
		self.mud_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.mud_cond_text_box, param = "mud_cond_selection", name_index = 8))

		self.gabbro_cond_btn = QPushButton('Gabbro Model')
		self.gabbro_cond_text_box = QLineEdit(CATE.name[9][CATE.gabbro_cond_selection])
		self.gabbro_cond_text_box.setEnabled(False)
		self.gabbro_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.gabbro_cond_text_box, param = "gabbro_cond_selection", name_index = 9))

		self.other_rock_cond_btn = QPushButton('Other Rock Model')
		self.other_rock_cond_text_box = QLineEdit(CATE.name[10][CATE.other_rock_cond_selection])
		self.other_rock_cond_text_box.setEnabled(False)
		self.other_rock_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.other_rock_cond_text_box, param = "other_rock_cond_selection", name_index = 10))

		self.quartz_cond_btn = QPushButton('Quartz Model')
		self.quartz_cond_text_box = QLineEdit(CATE.name[11][CATE.quartz_cond_selection])
		self.quartz_cond_text_box.setEnabled(False)
		self.quartz_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.quartz_cond_text_box, param = "quartz_cond_selection", name_index = 11))
		
		self.plag_cond_btn = QPushButton('Plagioclase Model')
		self.plag_cond_text_box = QLineEdit(CATE.name[12][CATE.plag_cond_selection])
		self.plag_cond_text_box.setEnabled(False)
		self.plag_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.plag_cond_text_box, param = "plag_cond_selection", name_index = 12))

		self.amp_cond_btn = QPushButton('Amphibole Model')
		self.amp_cond_text_box = QLineEdit(CATE.name[13][CATE.amp_cond_selection])
		self.amp_cond_text_box.setEnabled(False)
		self.amp_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.amp_cond_text_box, param = "amp_cond_selection", name_index = 13))

		self.kfelds_cond_btn = QPushButton('K-Feldspar Model')
		self.kfelds_cond_text_box = QLineEdit(CATE.name[14][CATE.kfelds_cond_selection])
		self.kfelds_cond_text_box.setEnabled(False)
		self.kfelds_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.kfelds_cond_text_box, param = "kfelds_cond_selection", name_index = 14))

		self.pyx_cond_btn = QPushButton('Pyroxene Model')
		self.pyx_cond_text_box = QLineEdit(CATE.name[15][CATE.pyx_cond_selection])
		self.pyx_cond_text_box.setEnabled(False)
		self.pyx_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.pyx_cond_text_box, param = "pyx_cond_selection", name_index = 15))

		self.mica_cond_btn = QPushButton('Mica Model')
		self.mica_cond_text_box = QLineEdit(CATE.name[16][CATE.mica_cond_selection])
		self.mica_cond_text_box.setEnabled(False)
		self.mica_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.mica_cond_text_box, param = "mica_cond_selection", name_index = 16))

		self.clay_cond_btn = QPushButton('Clay Model')
		self.clay_cond_text_box = QLineEdit(CATE.name[17][CATE.clay_cond_selection])
		self.clay_cond_text_box.setEnabled(False)
		self.clay_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.clay_cond_text_box, param = "clay_cond_selection", name_index = 17))

		self.carbonate_cond_btn = QPushButton('Carbonate Model')
		self.carbonate_cond_text_box = QLineEdit(CATE.name[18][CATE.carbonate_cond_selection])
		self.carbonate_cond_text_box.setEnabled(False)
		self.carbonate_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.carbonate_cond_text_box, param = "carbonate_cond_selection", name_index = 18))

		self.garnet_cond_btn = QPushButton('Garnet Model')
		self.garnet_cond_text_box = QLineEdit(CATE.name[19][CATE.garnet_cond_selection])
		self.garnet_cond_text_box.setEnabled(False)
		self.garnet_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.garnet_cond_text_box, param = "garnet_cond_selection", name_index = 19))

		self.sulphides_cond_btn = QPushButton('Sulphide Model')
		self.sulphides_cond_text_box = QLineEdit(CATE.name[20][CATE.sulphide_cond_selection])
		self.sulphides_cond_text_box.setEnabled(False)
		self.sulphides_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.sulphides_cond_text_box, param = "sulphide_cond_selection", name_index = 20))

		self.graphite_cond_btn = QPushButton('Graphite Model')
		self.graphite_cond_text_box = QLineEdit(CATE.name[21][CATE.graphite_cond_selection])
		self.graphite_cond_text_box.setEnabled(False)
		self.graphite_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.graphite_cond_text_box, param = "graphite_cond_selection", name_index = 21))

		self.other_cond_btn = QPushButton('Other Model')
		self.other_cond_text_box = QLineEdit(CATE.name[22][CATE.other_cond_selection])
		self.other_cond_text_box.setEnabled(False)
		self.other_cond_btn.clicked.connect(lambda: self.cond_get(textbox_obj=self.other_cond_text_box, param = "other_cond_selection", name_index = 22))

		label_meltfluid = QLabel(self)
		label_meltfluid.setText('--------Melt/Fluid--------')
		label_meltfluid.setStyleSheet("QLabel {font:bold};min-width: 10em; fontsize: 10pt;color: red")

		label_rocks = QLabel(self)
		label_rocks.setText('--------Rocks--------')
		label_rocks.setStyleSheet("QLabel {font:bold};min-width: 10em; fontsize: 10pt;color: red")

		label_minerals = QLabel(self)
		label_minerals.setText('--------Minerals--------')
		label_minerals.setStyleSheet("QLabel {font:bold};min-width: 10em; fontsize: 10pt;color: red")

		conduc_layout.addRow(label_meltfluid)
		conduc_layout.addRow(self.melt_cond_btn,self.melt_cond_text_box)
		conduc_layout.addRow(self.fluid_cond_btn,self.fluid_cond_text_box)
		conduc_layout.addRow(label_rocks)
		conduc_layout.addRow(self.granite_cond_btn,self.granite_cond_text_box)
		conduc_layout.addRow(self.granulite_cond_btn,self.granulite_cond_text_box)
		conduc_layout.addRow(self.sandstone_cond_btn,self.sandstone_cond_text_box)
		conduc_layout.addRow(self.gneiss_cond_btn,self.gneiss_cond_text_box)
		conduc_layout.addRow(self.amphibolite_cond_btn,self.amphibolite_cond_text_box)
		conduc_layout.addRow(self.basalt_cond_btn,self.basalt_cond_text_box)
		conduc_layout.addRow(self.mud_cond_btn,self.mud_cond_text_box)
		conduc_layout.addRow(self.gabbro_cond_btn,self.gabbro_cond_text_box)
		conduc_layout.addRow(self.other_rock_cond_btn,self.other_rock_cond_text_box)
		conduc_layout.addRow(label_minerals)
		conduc_layout.addRow(self.quartz_cond_btn,self.quartz_cond_text_box)
		conduc_layout.addRow(self.plag_cond_btn,self.plag_cond_text_box)
		conduc_layout.addRow(self.amp_cond_btn,self.amp_cond_text_box)
		conduc_layout.addRow(self.kfelds_cond_btn,self.kfelds_cond_text_box)
		conduc_layout.addRow(self.pyx_cond_btn,self.pyx_cond_text_box)
		conduc_layout.addRow(self.mica_cond_btn,self.mica_cond_text_box)
		conduc_layout.addRow(self.clay_cond_btn,self.clay_cond_text_box)
		conduc_layout.addRow(self.carbonate_cond_btn,self.carbonate_cond_text_box)
		conduc_layout.addRow(self.garnet_cond_btn,self.garnet_cond_text_box)
		conduc_layout.addRow(self.sulphides_cond_btn,self.sulphides_cond_text_box)
		conduc_layout.addRow(self.graphite_cond_btn,self.graphite_cond_text_box)
		conduc_layout.addRow(self.other_cond_btn,self.other_cond_text_box)

	def cond_get(self, textbox_obj, param, name_index):

		item, ok = QInputDialog.getItem(self, "select input dialog",
			"Conductivity model", CATE.name[name_index], 0, False)

		if ok and item:
			textbox_obj.setText(item)
		
		setattr(CATE, param, CATE.name[name_index].index(item))
		
class PHS_MIX_POP(QWidget):

	def __init__(self):

		QWidget.__init__(self)

		layout = QGridLayout(self)

		bg1 = QButtonGroup(self)
		
		label_solid_mix = QLabel(self)
		label_solid_mix.setText('--------Solid-State Mixing--------')
		label_solid_mix.setStyleSheet("QLabel {font:bold};min-width: 10em; fontsize: 10pt;color: red")
		layout.addWidget(label_solid_mix,0,0)
		
		self.btn_mix_1 = QRadioButton("Generalized Archie's Law (Glover, 2010)")
		self.btn_mix_1.toggled.connect(lambda:self.btnstate_phsmix(self.btn_mix_1))
		self.btn_mix_2 = QRadioButton("Hashin-Shtrikman Lower Bound (Berryman, 1995)")
		self.btn_mix_2.toggled.connect(lambda:self.btnstate_phsmix(self.btn_mix_2))
		self.btn_mix_3 = QRadioButton("Hashin-Shtrikman Upper Bound (Berryman, 1995)")
		self.btn_mix_3.toggled.connect(lambda:self.btnstate_phsmix(self.btn_mix_3))
		self.btn_mix_4 = QRadioButton("Parallel Model (Guegen and Palciauskas, 1994)")
		self.btn_mix_4.toggled.connect(lambda:self.btnstate_phsmix(self.btn_mix_4))
		self.btn_mix_5 = QRadioButton("Perpendicular Model (Guegen and Palciauskas, 1994)")
		self.btn_mix_5.toggled.connect(lambda:self.btnstate_phsmix(self.btn_mix_5))
		self.btn_mix_6 = QRadioButton("Random Model (Guegen and Palciauskas, 1994)")
		self.btn_mix_6.toggled.connect(lambda:self.btnstate_phsmix(self.btn_mix_6))
		
		if CATE.phs_mix_method == 0:
			self.btn_mix_1.setChecked(True)
		elif CATE.phs_mix_method == 1:
			self.btn_mix_2.setChecked(True)
		elif CATE.phs_mix_method == 2:
			self.btn_mix_3.setChecked(True)
		elif CATE.phs_mix_method == 3:
			self.btn_mix_4.setChecked(True)
		elif CATE.phs_mix_method == 4:
			self.btn_mix_5.setChecked(True)
		elif CATE.phs_mix_method == 5:
			self.btn_mix_6.setChecked(True)
			
		bg1.addButton(self.btn_mix_1)
		bg1.addButton(self.btn_mix_2)
		bg1.addButton(self.btn_mix_3)
		bg1.addButton(self.btn_mix_4)
		bg1.addButton(self.btn_mix_5)
		bg1.addButton(self.btn_mix_6)
		
		layout.addWidget(self.btn_mix_1,1,0)
		layout.addWidget(self.btn_mix_2,2,0)
		layout.addWidget(self.btn_mix_3,3,0)
		layout.addWidget(self.btn_mix_4,4,0)
		layout.addWidget(self.btn_mix_5,5,0)
		layout.addWidget(self.btn_mix_6,6,0)
		
		label_melt_mix = QLabel(self)
		label_melt_mix.setText('--------Melt/Fluid-Solid Mixing--------')
		label_melt_mix.setStyleSheet("QLabel {font:bold};min-width: 10em; fontsize: 10pt;color: red")
		layout.addWidget(label_melt_mix,0,1)

		self.btn_mix_melt_1 = QRadioButton("Modified Archie's Law (Glover et al., 2000)")
		self.btn_mix_melt_1.toggled.connect(lambda:self.btnstate_phsmix_melt(self.btn_mix_melt_1))
		self.btn_mix_melt_2 = QRadioButton("Tubes Model (ten Grotenhuis et al., 2005)")
		self.btn_mix_melt_2.toggled.connect(lambda:self.btnstate_phsmix_melt(self.btn_mix_melt_2))
		self.btn_mix_melt_3 = QRadioButton("Spheres Model (ten Grotenhuis et al., 2005)")
		self.btn_mix_melt_3.toggled.connect(lambda:self.btnstate_phsmix_melt(self.btn_mix_melt_3))
		self.btn_mix_melt_4 = QRadioButton("Modified Brick-layer Model (Schilling et al., 1997)")
		self.btn_mix_melt_4.toggled.connect(lambda:self.btnstate_phsmix_melt(self.btn_mix_melt_4))
		self.btn_mix_melt_5 = QRadioButton("Hashin-Shtrikman Upper-Bound (Glover et al., 2000)")
		self.btn_mix_melt_5.toggled.connect(lambda:self.btnstate_phsmix_melt(self.btn_mix_melt_5))
		self.btn_mix_melt_6 = QRadioButton("Hashin-Shtrikman Lower-Bound (Glover et al., 2000)")
		self.btn_mix_melt_6.toggled.connect(lambda:self.btnstate_phsmix_melt(self.btn_mix_melt_6))

		bg2 = QButtonGroup(self)

		bg2.addButton(self.btn_mix_melt_1)
		bg2.addButton(self.btn_mix_melt_2)
		bg2.addButton(self.btn_mix_melt_3)
		bg2.addButton(self.btn_mix_melt_4)
		bg2.addButton(self.btn_mix_melt_5)
		bg2.addButton(self.btn_mix_melt_6)

		layout.addWidget(self.btn_mix_melt_1,1,1)
		layout.addWidget(self.btn_mix_melt_2,2,1)
		layout.addWidget(self.btn_mix_melt_3,3,1)
		layout.addWidget(self.btn_mix_melt_4,4,1)
		layout.addWidget(self.btn_mix_melt_5,5,1)
		layout.addWidget(self.btn_mix_melt_6,6,1)

		if CATE.phs_melt_mix_method == 0:
			self.btn_mix_melt_1.setChecked(True)
		elif CATE.phs_melt_mix_method == 1:
			self.btn_mix_melt_2.setChecked(True)
		elif CATE.phs_melt_mix_method == 2:
			self.btn_mix_melt_3.setChecked(True)
		elif CATE.phs_melt_mix_method == 3:
			self.btn_mix_melt_4.setChecked(True)
		elif CATE.phs_melt_mix_method == 4:
			self.btn_mix_melt_5.setChecked(True)
		elif CATE.phs_melt_mix_method == 5:
			self.btn_mix_melt_6.setChecked(True)


	def btnstate_phsmix(self,b):

		if b.text() == "Generalized Archie's Law (Glover, 2010)":
			if b.isChecked() == True:
				CATE.phs_mix_method = 0
		if b.text() == "Hashin-Shtrikman Lower Bound (Berryman, 1995)":
			if b.isChecked() == True:
				CATE.phs_mix_method = 1
		if b.text() == "Hashin-Shtrikman Upper Bound (Berryman, 1995)":
			if b.isChecked() == True:
				CATE.phs_mix_method = 2
		if b.text() == "Parallel Model (Guegen and Palciauskas, 1994)":
			if b.isChecked() == True:
				CATE.phs_mix_method = 3
		if b.text() == "Perpendicular Model (Guegen and Palciauskas, 1994)":
			if b.isChecked() == True:
				CATE.phs_mix_method = 4
		if b.text() == "Random Model (Guegen and Palciauskas, 1994)":
			if b.isChecked() == True:
				CATE.phs_mix_method = 5
				
				
	def btnstate_phsmix_melt(self, b2):

		if b2.text() == "Modified Archie's Law (Glover et al., 2000)":
			if b2.isChecked() == True:
				CATE.phs_melt_mix_method = 0
				CATE.phs_melt_mix_type = 0
		elif b2.text() == "Tubes Model (ten Grotenhuis et al., 2005)":
			if b2.isChecked() == True:
				CATE.phs_melt_mix_method = 1
				CATE.phs_melt_mix_type = 1
		elif b2.text() == "Spheres Model (ten Grotenhuis et al., 2005)":
			if b2.isChecked() == True:
				CATE.phs_melt_mix_method = 2
				CATE.phs_melt_mix_type = 1
		elif b2.text() == "Modified Brick-layer Model (Glover et al., 2000)":
			if b2.isChecked() == True:
				CATE.phs_melt_mix_method = 3
				CATE.phs_melt_mix_type = 1
		elif b2.text() == "Hashin-Shtrikman Upper-Bound (Glover et al., 2000)":
			if b2.isChecked() == True:
				CATE.phs_melt_mix_method = 4
				CATE.phs_melt_mix_type = 1
		elif b2.text() == "Hashin-Shtrikman Lower-Bound (Glover et al., 2000)":
			if b2.isChecked() == True:
				CATE.phs_melt_mix_method = 5
				CATE.phs_melt_mix_type = 1
				
class PHS_INTER_POP(QWidget):

	def __init__(self):
	
		QWidget.__init__(self)

		layout = QFormLayout(self)

		desc_label = QLabel(self)
		desc_label.setText('---Enter Interconnectivity (Cementation exponent) values---')
		desc_label.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")
		
		self.melt_fluid_m_btn = QPushButton('Melt/Fluid m')
		self.melt_fluid_m_textbox = QLineEdit(str(CATE.melt_fluid_m[0]))
		self.melt_fluid_m_textbox.setEnabled(False)
		self.melt_fluid_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.melt_fluid_m_textbox, param = "melt_fluid_m"))


		#rocks
		rocks_label = QLabel(self)
		rocks_label.setText('---Rocks---')
		rocks_label.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")

		self.granite_m_btn = QPushButton('Granite m')
		self.granite_m_textbox = QLineEdit(str(CATE.granite_m[0]))
		self.granite_m_textbox.setEnabled(False)
		self.granite_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.granite_m_textbox, param = "granite_m"))

		self.granulite_m_btn = QPushButton('Granulite m')
		self.granulite_m_textbox = QLineEdit(str(CATE.granulite_m[0]))
		self.granulite_m_textbox.setEnabled(False)
		self.granulite_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.granulite_m_textbox, param = "granulite_m"))

		self.sandstone_m_btn = QPushButton('Sandstone m')
		self.sandstone_m_textbox = QLineEdit(str(CATE.sandstone_m[0]))
		self.sandstone_m_textbox.setEnabled(False)
		self.sandstone_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.sandstone_m_textbox, param = "sandstone_m"))

		self.gneiss_m_btn = QPushButton('Gneiss m')
		self.gneiss_m_textbox = QLineEdit(str(CATE.gneiss_m[0]))
		self.gneiss_m_textbox.setEnabled(False)
		self.gneiss_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.gneiss_m_textbox, param = "gneiss_m"))

		self.amphibolite_m_btn = QPushButton('Amphibolite m')
		self.amphibolite_m_textbox = QLineEdit(str(CATE.amphibolite_m[0]))
		self.amphibolite_m_textbox.setEnabled(False)
		self.amphibolite_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.amphibolite_m_textbox, param = "amphibolite_m"))

		self.basalt_m_btn = QPushButton('Basalt m')
		self.basalt_m_textbox = QLineEdit(str(CATE.basalt_m[0]))
		self.basalt_m_textbox.setEnabled(False)
		self.basalt_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.basalt_m_textbox, param = "basalt_m"))

		self.mud_m_btn = QPushButton('mud m')
		self.mud_m_textbox = QLineEdit(str(CATE.mud_m[0]))
		self.mud_m_textbox.setEnabled(False)
		self.mud_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.mud_m_textbox, param = "mud_m"))

		self.gabbro_m_btn = QPushButton('Gabbro m')
		self.gabbro_m_textbox = QLineEdit(str(CATE.gabbro_m[0]))
		self.gabbro_m_textbox.setEnabled(False)
		self.gabbro_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.gabbro_m_textbox, param = "gabbro_m"))

		self.other_rock_m_btn = QPushButton('Other rock m')
		self.other_rock_m_textbox = QLineEdit(str(CATE.other_rock_m[0]))
		self.other_rock_m_textbox.setEnabled(False)
		self.other_rock_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.other_rock_m_textbox, param = "other_rock_m"))
		
		#minerals
		minerals_label = QLabel(self)
		minerals_label.setText('---Mineral---')
		minerals_label.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")

		self.quartz_m_btn = QPushButton('Quartz m')
		self.quartz_m_textbox = QLineEdit(str(CATE.quartz_m))
		self.quartz_m_textbox.setEnabled(False)
		self.quartz_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.quartz_m_textbox, param = "quartz_m"))

		self.plag_m_btn = QPushButton('Plagioclase m')
		self.plag_m_textbox = QLineEdit(str(CATE.plag_m))
		self.plag_m_textbox.setEnabled(False)
		self.plag_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.plag_m_textbox, param = "plag_m"))

		self.amp_m_btn = QPushButton('Amphibole m')
		self.amp_m_textbox = QLineEdit(str(CATE.amp_m))
		self.amp_m_textbox.setEnabled(False)
		self.amp_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.amp_m_textbox, param = "amp_m"))

		self.kfelds_m_btn = QPushButton('K-Feldspar m')
		self.kfelds_m_textbox = QLineEdit(str(CATE.kfelds_m))
		self.kfelds_m_textbox.setEnabled(False)
		self.kfelds_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.kfelds_m_textbox, param = "kfelds_m"))

		self.pyx_m_btn = QPushButton('Pyroxene m')
		self.pyx_m_textbox = QLineEdit(str(CATE.pyx_m))
		self.pyx_m_textbox.setEnabled(False)
		self.pyx_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.pyx_m_textbox, param = "pyx_m"))

		self.mica_m_btn = QPushButton('Mica m')
		self.mica_m_textbox = QLineEdit(str(CATE.mica_m))
		self.mica_m_textbox.setEnabled(False)
		self.mica_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.mica_m_textbox, param = "mica_m"))

		self.clay_m_btn = QPushButton('Clay m')
		self.clay_m_textbox = QLineEdit(str(CATE.clay_m))
		self.clay_m_textbox.setEnabled(False)
		self.clay_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.clay_m_textbox, param = "clay_m"))

		self.carbonates_m_btn = QPushButton('Carbonates m')
		self.carbonates_m_textbox = QLineEdit(str(CATE.carbonate_m))
		self.carbonates_m_textbox.setEnabled(False)
		self.carbonates_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.carbonates_m_textbox, param = "carbonate_m"))

		self.garnet_m_btn = QPushButton('Garnet m')
		self.garnet_m_textbox = QLineEdit(str(CATE.garnet_m))
		self.garnet_m_textbox.setEnabled(False)
		self.garnet_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.garnet_m_textbox, param = "garnet_m"))

		self.sulphides_m_btn = QPushButton('Sulphides m')
		self.sulphides_m_textbox = QLineEdit(str(CATE.sulphide_m))
		self.sulphides_m_textbox.setEnabled(False)
		self.sulphides_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.sulphides_m_textbox, param = "sulphide_m"))

		self.graphite_m_btn = QPushButton('Graphite m')
		self.graphite_m_textbox = QLineEdit(str(CATE.graphite_m))
		self.graphite_m_textbox.setEnabled(False)
		self.graphite_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.graphite_m_textbox, param = "graphite_m"))

		self.other_m_btn = QPushButton('Other m')
		self.other_m_textbox = QLineEdit(str(CATE.other_m))
		self.other_m_textbox.setEnabled(False)
		self.other_m_btn.clicked.connect(lambda: self.get_interconnectivity(textbox_obj=self.other_m_textbox, param = "other_m"))

	
		layout.addRow(desc_label)
		layout.addRow(self.melt_fluid_m_btn, self.melt_fluid_m_textbox)

		layout.addRow(rocks_label)

		layout.addRow(self.granite_m_btn, self.granite_m_textbox)
		layout.addRow(self.granulite_m_btn, self.granulite_m_textbox)
		layout.addRow(self.sandstone_m_btn, self.sandstone_m_textbox)
		layout.addRow(self.gneiss_m_btn, self.gneiss_m_textbox)
		layout.addRow(self.amphibolite_m_btn, self.amphibolite_m_textbox)
		layout.addRow(self.basalt_m_btn, self.basalt_m_textbox)
		layout.addRow(self.mud_m_btn, self.mud_m_textbox)
		layout.addRow(self.gabbro_m_btn, self.gabbro_m_textbox)
		layout.addRow(self.other_rock_m_btn, self.other_rock_m_textbox)

		layout.addRow(minerals_label)

		layout.addRow(self.quartz_m_btn, self.quartz_m_textbox)
		layout.addRow(self.plag_m_btn, self.plag_m_textbox)
		layout.addRow(self.amp_m_btn, self.amp_m_textbox)
		layout.addRow(self.kfelds_m_btn, self.kfelds_m_textbox)
		layout.addRow(self.pyx_m_btn, self.pyx_m_textbox)
		layout.addRow(self.mica_m_btn, self.mica_m_textbox)
		layout.addRow(self.clay_m_btn, self.clay_m_textbox)
		layout.addRow(self.carbonates_m_btn, self.carbonates_m_textbox)
		layout.addRow(self.garnet_m_btn, self.garnet_m_textbox)
		layout.addRow(self.sulphides_m_btn, self.sulphides_m_textbox)
		layout.addRow(self.graphite_m_btn, self.graphite_m_textbox)
		layout.addRow(self.other_m_btn, self.other_m_textbox)

	def get_interconnectivity(self,textbox_obj,param):

		text, ok = QInputDialog.getText(self, 'Interconnectivity dialogue', 'Enter the value (bigger than 1)')
		if ok:
			try:
				float(text)
				if (float(text) >= 1):

					textbox_obj.setText(str(text))
					setattr(CATE, param, np.array([float(text)]))

				else:
					QMessageBox.about(self,"Warning!","Enter a value above 1")
			except ValueError:
				QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")

class WATER_PHS_POP(QWidget):

	def __init__(self):
	
		QWidget.__init__(self)

		layout = QFormLayout(self)

		desc_label = QLabel(self)
		desc_label.setText('---Enter Solid phase water contents (in ppm) values---')
		desc_label.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")

		#rocks
		rocks_label = QLabel(self)
		rocks_label.setText('---Rocks---')
		rocks_label.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")
		
		self.granite_water_btn = QPushButton('Granite water')
		self.granite_water_textbox = QLineEdit(str(CATE.granite_water[0]))
		self.granite_water_textbox.setEnabled(False)
		self.granite_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.granite_water_textbox, param = "granite_water"))

		self.granulite_water_btn = QPushButton('Granulite water')
		self.granulite_water_textbox = QLineEdit(str(CATE.granulite_water[0]))
		self.granulite_water_textbox.setEnabled(False)
		self.granulite_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.granulite_water_textbox, param = "granulite_water"))

		self.sandstone_water_btn = QPushButton('Sandstone water')
		self.sandstone_water_textbox = QLineEdit(str(CATE.sandstone_water[0]))
		self.sandstone_water_textbox.setEnabled(False)
		self.sandstone_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.sandstone_water_textbox, param = "sandstone_water"))

		self.gneiss_water_btn = QPushButton('Gneiss water')
		self.gneiss_water_textbox = QLineEdit(str(CATE.gneiss_water[0]))
		self.gneiss_water_textbox.setEnabled(False)
		self.gneiss_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.gneiss_water_textbox, param = "gneiss_water"))

		self.amphibolite_water_btn = QPushButton('Amphibolite water')
		self.amphibolite_water_textbox = QLineEdit(str(CATE.amphibolite_water[0]))
		self.amphibolite_water_textbox.setEnabled(False)
		self.amphibolite_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.amphibolite_water_textbox, param = "amphibolite_water"))

		self.basalt_water_btn = QPushButton('Basalt water')
		self.basalt_water_textbox = QLineEdit(str(CATE.basalt_water[0]))
		self.basalt_water_textbox.setEnabled(False)
		self.basalt_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.basalt_water_textbox, param = "basalt_water"))

		self.mud_water_btn = QPushButton('Mudstone/shale water')
		self.mud_water_textbox = QLineEdit(str(CATE.mud_water[0]))
		self.mud_water_textbox.setEnabled(False)
		self.mud_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.mud_water_textbox, param = "mud_water"))

		self.gabbro_water_btn = QPushButton('Gabbro water')
		self.gabbro_water_textbox = QLineEdit(str(CATE.gabbro_water[0]))
		self.gabbro_water_textbox.setEnabled(False)
		self.gabbro_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.gabbro_water_textbox, param = "gabbro_water"))

		self.other_rock_water_btn = QPushButton('Other rock water')
		self.other_rock_water_textbox = QLineEdit(str(CATE.other_rock_water[0]))
		self.other_rock_water_textbox.setEnabled(False)
		self.other_rock_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.other_rock_water_textbox, param = "other_rock_water"))

		#minerals
		minerals_label = QLabel(self)
		minerals_label.setText('---Mineral---')
		minerals_label.setStyleSheet("QLabel {font:bold};fontsize: 10pt;color: red")

		self.quartz_water_btn = QPushButton('Quartz water')
		self.quartz_water_textbox = QLineEdit(str(CATE.quartz_water[0]))
		self.quartz_water_textbox.setEnabled(False)
		self.quartz_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.quartz_water_textbox, param = "quartz_water"))

		self.plag_water_btn = QPushButton('Plagioclase water')
		self.plag_water_textbox = QLineEdit(str(CATE.plag_water[0]))
		self.plag_water_textbox.setEnabled(False)
		self.plag_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.plag_water_textbox, param = "plag_water"))

		self.amp_water_btn = QPushButton('Amphibole water')
		self.amp_water_textbox = QLineEdit(str(CATE.amp_water[0]))
		self.amp_water_textbox.setEnabled(False)
		self.amp_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.amp_water_textbox, param = "amp_water"))

		self.kfelds_water_btn = QPushButton('K-feldspar water')
		self.kfelds_water_textbox = QLineEdit(str(CATE.kfelds_water[0]))
		self.kfelds_water_textbox.setEnabled(False)
		self.kfelds_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.kfelds_water_textbox, param = "kfelds_water"))

		self.garnet_water_btn = QPushButton('Garnet water')
		self.garnet_water_textbox = QLineEdit(str(CATE.garnet_water[0]))
		self.garnet_water_textbox.setEnabled(False)
		self.garnet_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.garnet_water_textbox, param = "garnet_water"))

		self.carbonate_water_btn = QPushButton('Carbonate water')
		self.carbonate_water_textbox = QLineEdit(str(CATE.carbonate_water[0]))
		self.carbonate_water_textbox.setEnabled(False)
		self.carbonate_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.carbonate_water_textbox, param = "carbonate_water"))

		self.pyx_water_btn = QPushButton('Pyroxene water')
		self.pyx_water_textbox = QLineEdit(str(CATE.pyx_water[0]))
		self.pyx_water_textbox.setEnabled(False)
		self.pyx_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.pyx_water_textbox, param = "pyx_water"))

		self.mica_water_btn = QPushButton('Mica water')
		self.mica_water_textbox = QLineEdit(str(CATE.mica_water[0]))
		self.mica_water_textbox.setEnabled(False)
		self.mica_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.mica_water_textbox, param = "mica_water"))

		self.clay_water_btn = QPushButton('Clay water')
		self.clay_water_textbox = QLineEdit(str(CATE.clay_water[0]))
		self.clay_water_textbox.setEnabled(False)
		self.clay_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.clay_water_textbox, param = "clay_water"))

		self.other_water_btn = QPushButton('Other water')
		self.other_water_textbox = QLineEdit(str(CATE.other_water[0]))
		self.other_water_textbox.setEnabled(False)
		self.other_water_btn.clicked.connect(lambda: self.get_water(textbox_obj=self.other_water_textbox, param = "other_water"))

		layout.addRow(desc_label)
		layout.addRow(rocks_label)

		layout.addRow(self.granite_water_btn, self.granite_water_textbox)
		layout.addRow(self.granulite_water_btn, self.granulite_water_textbox)
		layout.addRow(self.sandstone_water_btn, self.sandstone_water_textbox)
		layout.addRow(self.gneiss_water_btn, self.gneiss_water_textbox)
		layout.addRow(self.amphibolite_water_btn, self.amphibolite_water_textbox)
		layout.addRow(self.basalt_water_btn, self.basalt_water_textbox)
		layout.addRow(self.mud_water_btn, self.mud_water_textbox)
		layout.addRow(self.gabbro_water_btn, self.gabbro_water_textbox)
		layout.addRow(self.other_rock_water_btn, self.other_rock_water_textbox)

		layout.addRow(minerals_label)

		layout.addRow(self.quartz_water_btn, self.quartz_water_textbox)
		layout.addRow(self.plag_water_btn, self.plag_water_textbox)
		layout.addRow(self.amp_water_btn, self.amp_water_textbox)
		layout.addRow(self.kfelds_water_btn, self.kfelds_water_textbox)
		layout.addRow(self.garnet_water_btn, self.garnet_water_textbox)
		layout.addRow(self.carbonate_water_btn, self.carbonate_water_textbox)
		layout.addRow(self.pyx_water_btn, self.pyx_water_textbox)
		layout.addRow(self.mica_water_btn, self.mica_water_textbox)
		layout.addRow(self.clay_water_btn, self.clay_water_textbox)
		layout.addRow(self.other_water_btn, self.other_water_textbox)

	def get_water(self,textbox_obj,param):

		text, ok = QInputDialog.getText(self, 'Water content dialogue', 'Enter the value in ppm (bigger than 0)')
		if ok:
			try:
				float(text)
				if (float(text) >= 0):

					textbox_obj.setText(str(text))
					setattr(CATE, param, np.array([float(text)]))

				else:
					QMessageBox.about(self,"Warning!","Enter a value above 0")
			except ValueError:
				QMessageBox.about(self,"Warning!","Please enter a value that can be converted to floating number.")

		
def main():

	app = QApplication(sys.argv)
	GUI = CATE()
	sys.exit(app.exec_())

if __name__ == '__main__':
	main()